//
// /tmp/glm_dispatch.h
//
// Autogenerated from gl.xml
//
// Mike Larson
//
// October 2021
//

#pragma once

#include "glcorearb.h"

#include "gltypes.h"

typedef struct GLMContextRec_t *GLMContext;

void init_dispatch(GLMContext ctx);

struct GLMDispatchTable {
        void  (*cull_face)(GLMContext ctx, GLenum mode);
        void  (*front_face)(GLMContext ctx, GLenum mode);
        void  (*hint)(GLMContext ctx, GLenum target, GLenum mode);
        void  (*line_width)(GLMContext ctx, GLfloat width);
        void  (*point_size)(GLMContext ctx, GLfloat size);
        void  (*polygon_mode)(GLMContext ctx, GLenum face, GLenum mode);
        void  (*scissor)(GLMContext ctx, GLint x, GLint y, GLsizei width, GLsizei height);
        void  (*tex_parameterf)(GLMContext ctx, GLenum target, GLenum pname, GLfloat param);
        void  (*tex_parameterfv)(GLMContext ctx, GLenum target, GLenum pname, const GLfloat *params);
        void  (*tex_parameteri)(GLMContext ctx, GLenum target, GLenum pname, GLint param);
        void  (*tex_parameteriv)(GLMContext ctx, GLenum target, GLenum pname, const GLint *params);
        void  (*tex_image1D)(GLMContext ctx, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);
        void  (*tex_image2D)(GLMContext ctx, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
        void  (*draw_buffer)(GLMContext ctx, GLenum buf);
        void  (*clear)(GLMContext ctx, GLbitfield mask);
        void  (*clear_color)(GLMContext ctx, GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
        void  (*clear_stencil)(GLMContext ctx, GLint s);
        void  (*clear_depth)(GLMContext ctx, GLdouble depth);
        void  (*stencil_mask)(GLMContext ctx, GLuint mask);
        void  (*color_mask)(GLMContext ctx, GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
        void  (*depth_mask)(GLMContext ctx, GLboolean flag);
        void  (*disable)(GLMContext ctx, GLenum cap);
        void  (*enable)(GLMContext ctx, GLenum cap);
        void  (*finish)(GLMContext ctx);
        void  (*flush)(GLMContext ctx);
        void  (*blend_func)(GLMContext ctx, GLenum sfactor, GLenum dfactor);
        void  (*logic_op)(GLMContext ctx, GLenum opcode);
        void  (*stencil_func)(GLMContext ctx, GLenum func, GLint ref, GLuint mask);
        void  (*stencil_op)(GLMContext ctx, GLenum fail, GLenum zfail, GLenum zpass);
        void  (*depth_func)(GLMContext ctx, GLenum func);
        void  (*pixel_storef)(GLMContext ctx, GLenum pname, GLfloat param);
        void  (*pixel_storei)(GLMContext ctx, GLenum pname, GLint param);
        void  (*read_buffer)(GLMContext ctx, GLenum src);
        void  (*read_pixels)(GLMContext ctx, GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels);
        void  (*get_booleanv)(GLMContext ctx, GLenum pname, GLboolean *data);
        void  (*get_doublev)(GLMContext ctx, GLenum pname, GLdouble *data);
        GLenum (*get_error)(GLMContext ctx);
        void  (*get_floatv)(GLMContext ctx, GLenum pname, GLfloat *data);
        void  (*get_integerv)(GLMContext ctx, GLenum pname, GLint *data);
        const GLubyte *(*get_string)(GLMContext ctx, GLenum name);
        void  (*get_tex_image)(GLMContext ctx, GLenum target, GLint level, GLenum format, GLenum type, void *pixels);
        void  (*get_tex_parameterfv)(GLMContext ctx, GLenum target, GLenum pname, GLfloat *params);
        void  (*get_tex_parameteriv)(GLMContext ctx, GLenum target, GLenum pname, GLint *params);
        void  (*get_tex_level_parameterfv)(GLMContext ctx, GLenum target, GLint level, GLenum pname, GLfloat *params);
        void  (*get_tex_level_parameteriv)(GLMContext ctx, GLenum target, GLint level, GLenum pname, GLint *params);
        GLboolean (*is_enabled)(GLMContext ctx, GLenum cap);
        void  (*depth_range)(GLMContext ctx, GLdouble n, GLdouble f);
        void  (*viewport)(GLMContext ctx, GLint x, GLint y, GLsizei width, GLsizei height);
        void  (*new_list)(GLMContext ctx, GLuint list, GLenum mode);
        void  (*end_list)(GLMContext ctx);
        void  (*call_list)(GLMContext ctx, GLuint list);
        void  (*call_lists)(GLMContext ctx, GLsizei n, GLenum type, const void *lists);
        void  (*delete_lists)(GLMContext ctx, GLuint list, GLsizei range);
        GLuint (*gen_lists)(GLMContext ctx, GLsizei range);
        void  (*list_base)(GLMContext ctx, GLuint base);
        void  (*begin)(GLMContext ctx, GLenum mode);
        void  (*bitmap)(GLMContext ctx, GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap);
        void  (*color3b)(GLMContext ctx, GLbyte red, GLbyte green, GLbyte blue);
        void  (*color3bv)(GLMContext ctx, const GLbyte *v);
        void  (*color3d)(GLMContext ctx, GLdouble red, GLdouble green, GLdouble blue);
        void  (*color3dv)(GLMContext ctx, const GLdouble *v);
        void  (*color3f)(GLMContext ctx, GLfloat red, GLfloat green, GLfloat blue);
        void  (*color3fv)(GLMContext ctx, const GLfloat *v);
        void  (*color3i)(GLMContext ctx, GLint red, GLint green, GLint blue);
        void  (*color3iv)(GLMContext ctx, const GLint *v);
        void  (*color3s)(GLMContext ctx, GLshort red, GLshort green, GLshort blue);
        void  (*color3sv)(GLMContext ctx, const GLshort *v);
        void  (*color3ub)(GLMContext ctx, GLubyte red, GLubyte green, GLubyte blue);
        void  (*color3ubv)(GLMContext ctx, const GLubyte *v);
        void  (*color3ui)(GLMContext ctx, GLuint red, GLuint green, GLuint blue);
        void  (*color3uiv)(GLMContext ctx, const GLuint *v);
        void  (*color3us)(GLMContext ctx, GLushort red, GLushort green, GLushort blue);
        void  (*color3usv)(GLMContext ctx, const GLushort *v);
        void  (*color4b)(GLMContext ctx, GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
        void  (*color4bv)(GLMContext ctx, const GLbyte *v);
        void  (*color4d)(GLMContext ctx, GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
        void  (*color4dv)(GLMContext ctx, const GLdouble *v);
        void  (*color4f)(GLMContext ctx, GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
        void  (*color4fv)(GLMContext ctx, const GLfloat *v);
        void  (*color4i)(GLMContext ctx, GLint red, GLint green, GLint blue, GLint alpha);
        void  (*color4iv)(GLMContext ctx, const GLint *v);
        void  (*color4s)(GLMContext ctx, GLshort red, GLshort green, GLshort blue, GLshort alpha);
        void  (*color4sv)(GLMContext ctx, const GLshort *v);
        void  (*color4ub)(GLMContext ctx, GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
        void  (*color4ubv)(GLMContext ctx, const GLubyte *v);
        void  (*color4ui)(GLMContext ctx, GLuint red, GLuint green, GLuint blue, GLuint alpha);
        void  (*color4uiv)(GLMContext ctx, const GLuint *v);
        void  (*color4us)(GLMContext ctx, GLushort red, GLushort green, GLushort blue, GLushort alpha);
        void  (*color4usv)(GLMContext ctx, const GLushort *v);
        void  (*edge_flag)(GLMContext ctx, GLboolean flag);
        void  (*edge_flagv)(GLMContext ctx, const GLboolean *flag);
        void  (*end)(GLMContext ctx);
        void  (*indexd)(GLMContext ctx, GLdouble c);
        void  (*indexdv)(GLMContext ctx, const GLdouble *c);
        void  (*indexf)(GLMContext ctx, GLfloat c);
        void  (*indexfv)(GLMContext ctx, const GLfloat *c);
        void  (*indexi)(GLMContext ctx, GLint c);
        void  (*indexiv)(GLMContext ctx, const GLint *c);
        void  (*indexs)(GLMContext ctx, GLshort c);
        void  (*indexsv)(GLMContext ctx, const GLshort *c);
        void  (*normal3b)(GLMContext ctx, GLbyte nx, GLbyte ny, GLbyte nz);
        void  (*normal3bv)(GLMContext ctx, const GLbyte *v);
        void  (*normal3d)(GLMContext ctx, GLdouble nx, GLdouble ny, GLdouble nz);
        void  (*normal3dv)(GLMContext ctx, const GLdouble *v);
        void  (*normal3f)(GLMContext ctx, GLfloat nx, GLfloat ny, GLfloat nz);
        void  (*normal3fv)(GLMContext ctx, const GLfloat *v);
        void  (*normal3i)(GLMContext ctx, GLint nx, GLint ny, GLint nz);
        void  (*normal3iv)(GLMContext ctx, const GLint *v);
        void  (*normal3s)(GLMContext ctx, GLshort nx, GLshort ny, GLshort nz);
        void  (*normal3sv)(GLMContext ctx, const GLshort *v);
        void  (*raster_pos2d)(GLMContext ctx, GLdouble x, GLdouble y);
        void  (*raster_pos2dv)(GLMContext ctx, const GLdouble *v);
        void  (*raster_pos2f)(GLMContext ctx, GLfloat x, GLfloat y);
        void  (*raster_pos2fv)(GLMContext ctx, const GLfloat *v);
        void  (*raster_pos2i)(GLMContext ctx, GLint x, GLint y);
        void  (*raster_pos2iv)(GLMContext ctx, const GLint *v);
        void  (*raster_pos2s)(GLMContext ctx, GLshort x, GLshort y);
        void  (*raster_pos2sv)(GLMContext ctx, const GLshort *v);
        void  (*raster_pos3d)(GLMContext ctx, GLdouble x, GLdouble y, GLdouble z);
        void  (*raster_pos3dv)(GLMContext ctx, const GLdouble *v);
        void  (*raster_pos3f)(GLMContext ctx, GLfloat x, GLfloat y, GLfloat z);
        void  (*raster_pos3fv)(GLMContext ctx, const GLfloat *v);
        void  (*raster_pos3i)(GLMContext ctx, GLint x, GLint y, GLint z);
        void  (*raster_pos3iv)(GLMContext ctx, const GLint *v);
        void  (*raster_pos3s)(GLMContext ctx, GLshort x, GLshort y, GLshort z);
        void  (*raster_pos3sv)(GLMContext ctx, const GLshort *v);
        void  (*raster_pos4d)(GLMContext ctx, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
        void  (*raster_pos4dv)(GLMContext ctx, const GLdouble *v);
        void  (*raster_pos4f)(GLMContext ctx, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
        void  (*raster_pos4fv)(GLMContext ctx, const GLfloat *v);
        void  (*raster_pos4i)(GLMContext ctx, GLint x, GLint y, GLint z, GLint w);
        void  (*raster_pos4iv)(GLMContext ctx, const GLint *v);
        void  (*raster_pos4s)(GLMContext ctx, GLshort x, GLshort y, GLshort z, GLshort w);
        void  (*raster_pos4sv)(GLMContext ctx, const GLshort *v);
        void  (*rectd)(GLMContext ctx, GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
        void  (*rectdv)(GLMContext ctx, const GLdouble *v1, const GLdouble *v2);
        void  (*rectf)(GLMContext ctx, GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
        void  (*rectfv)(GLMContext ctx, const GLfloat *v1, const GLfloat *v2);
        void  (*recti)(GLMContext ctx, GLint x1, GLint y1, GLint x2, GLint y2);
        void  (*rectiv)(GLMContext ctx, const GLint *v1, const GLint *v2);
        void  (*rects)(GLMContext ctx, GLshort x1, GLshort y1, GLshort x2, GLshort y2);
        void  (*rectsv)(GLMContext ctx, const GLshort *v1, const GLshort *v2);
        void  (*tex_coord1d)(GLMContext ctx, GLdouble s);
        void  (*tex_coord1dv)(GLMContext ctx, const GLdouble *v);
        void  (*tex_coord1f)(GLMContext ctx, GLfloat s);
        void  (*tex_coord1fv)(GLMContext ctx, const GLfloat *v);
        void  (*tex_coord1i)(GLMContext ctx, GLint s);
        void  (*tex_coord1iv)(GLMContext ctx, const GLint *v);
        void  (*tex_coord1s)(GLMContext ctx, GLshort s);
        void  (*tex_coord1sv)(GLMContext ctx, const GLshort *v);
        void  (*tex_coord2d)(GLMContext ctx, GLdouble s, GLdouble t);
        void  (*tex_coord2dv)(GLMContext ctx, const GLdouble *v);
        void  (*tex_coord2f)(GLMContext ctx, GLfloat s, GLfloat t);
        void  (*tex_coord2fv)(GLMContext ctx, const GLfloat *v);
        void  (*tex_coord2i)(GLMContext ctx, GLint s, GLint t);
        void  (*tex_coord2iv)(GLMContext ctx, const GLint *v);
        void  (*tex_coord2s)(GLMContext ctx, GLshort s, GLshort t);
        void  (*tex_coord2sv)(GLMContext ctx, const GLshort *v);
        void  (*tex_coord3d)(GLMContext ctx, GLdouble s, GLdouble t, GLdouble r);
        void  (*tex_coord3dv)(GLMContext ctx, const GLdouble *v);
        void  (*tex_coord3f)(GLMContext ctx, GLfloat s, GLfloat t, GLfloat r);
        void  (*tex_coord3fv)(GLMContext ctx, const GLfloat *v);
        void  (*tex_coord3i)(GLMContext ctx, GLint s, GLint t, GLint r);
        void  (*tex_coord3iv)(GLMContext ctx, const GLint *v);
        void  (*tex_coord3s)(GLMContext ctx, GLshort s, GLshort t, GLshort r);
        void  (*tex_coord3sv)(GLMContext ctx, const GLshort *v);
        void  (*tex_coord4d)(GLMContext ctx, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
        void  (*tex_coord4dv)(GLMContext ctx, const GLdouble *v);
        void  (*tex_coord4f)(GLMContext ctx, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
        void  (*tex_coord4fv)(GLMContext ctx, const GLfloat *v);
        void  (*tex_coord4i)(GLMContext ctx, GLint s, GLint t, GLint r, GLint q);
        void  (*tex_coord4iv)(GLMContext ctx, const GLint *v);
        void  (*tex_coord4s)(GLMContext ctx, GLshort s, GLshort t, GLshort r, GLshort q);
        void  (*tex_coord4sv)(GLMContext ctx, const GLshort *v);
        void  (*vertex2d)(GLMContext ctx, GLdouble x, GLdouble y);
        void  (*vertex2dv)(GLMContext ctx, const GLdouble *v);
        void  (*vertex2f)(GLMContext ctx, GLfloat x, GLfloat y);
        void  (*vertex2fv)(GLMContext ctx, const GLfloat *v);
        void  (*vertex2i)(GLMContext ctx, GLint x, GLint y);
        void  (*vertex2iv)(GLMContext ctx, const GLint *v);
        void  (*vertex2s)(GLMContext ctx, GLshort x, GLshort y);
        void  (*vertex2sv)(GLMContext ctx, const GLshort *v);
        void  (*vertex3d)(GLMContext ctx, GLdouble x, GLdouble y, GLdouble z);
        void  (*vertex3dv)(GLMContext ctx, const GLdouble *v);
        void  (*vertex3f)(GLMContext ctx, GLfloat x, GLfloat y, GLfloat z);
        void  (*vertex3fv)(GLMContext ctx, const GLfloat *v);
        void  (*vertex3i)(GLMContext ctx, GLint x, GLint y, GLint z);
        void  (*vertex3iv)(GLMContext ctx, const GLint *v);
        void  (*vertex3s)(GLMContext ctx, GLshort x, GLshort y, GLshort z);
        void  (*vertex3sv)(GLMContext ctx, const GLshort *v);
        void  (*vertex4d)(GLMContext ctx, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
        void  (*vertex4dv)(GLMContext ctx, const GLdouble *v);
        void  (*vertex4f)(GLMContext ctx, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
        void  (*vertex4fv)(GLMContext ctx, const GLfloat *v);
        void  (*vertex4i)(GLMContext ctx, GLint x, GLint y, GLint z, GLint w);
        void  (*vertex4iv)(GLMContext ctx, const GLint *v);
        void  (*vertex4s)(GLMContext ctx, GLshort x, GLshort y, GLshort z, GLshort w);
        void  (*vertex4sv)(GLMContext ctx, const GLshort *v);
        void  (*clip_plane)(GLMContext ctx, GLenum plane, const GLdouble *equation);
        void  (*color_material)(GLMContext ctx, GLenum face, GLenum mode);
        void  (*fogf)(GLMContext ctx, GLenum pname, GLfloat param);
        void  (*fogfv)(GLMContext ctx, GLenum pname, const GLfloat *params);
        void  (*fogi)(GLMContext ctx, GLenum pname, GLint param);
        void  (*fogiv)(GLMContext ctx, GLenum pname, const GLint *params);
        void  (*lightf)(GLMContext ctx, GLenum light, GLenum pname, GLfloat param);
        void  (*lightfv)(GLMContext ctx, GLenum light, GLenum pname, const GLfloat *params);
        void  (*lighti)(GLMContext ctx, GLenum light, GLenum pname, GLint param);
        void  (*lightiv)(GLMContext ctx, GLenum light, GLenum pname, const GLint *params);
        void  (*light_modelf)(GLMContext ctx, GLenum pname, GLfloat param);
        void  (*light_modelfv)(GLMContext ctx, GLenum pname, const GLfloat *params);
        void  (*light_modeli)(GLMContext ctx, GLenum pname, GLint param);
        void  (*light_modeliv)(GLMContext ctx, GLenum pname, const GLint *params);
        void  (*line_stipple)(GLMContext ctx, GLint factor, GLushort pattern);
        void  (*materialf)(GLMContext ctx, GLenum face, GLenum pname, GLfloat param);
        void  (*materialfv)(GLMContext ctx, GLenum face, GLenum pname, const GLfloat *params);
        void  (*materiali)(GLMContext ctx, GLenum face, GLenum pname, GLint param);
        void  (*materialiv)(GLMContext ctx, GLenum face, GLenum pname, const GLint *params);
        void  (*polygon_stipple)(GLMContext ctx, const GLubyte *mask);
        void  (*shade_model)(GLMContext ctx, GLenum mode);
        void  (*tex_envf)(GLMContext ctx, GLenum target, GLenum pname, GLfloat param);
        void  (*tex_envfv)(GLMContext ctx, GLenum target, GLenum pname, const GLfloat *params);
        void  (*tex_envi)(GLMContext ctx, GLenum target, GLenum pname, GLint param);
        void  (*tex_enviv)(GLMContext ctx, GLenum target, GLenum pname, const GLint *params);
        void  (*tex_gend)(GLMContext ctx, GLenum coord, GLenum pname, GLdouble param);
        void  (*tex_gendv)(GLMContext ctx, GLenum coord, GLenum pname, const GLdouble *params);
        void  (*tex_genf)(GLMContext ctx, GLenum coord, GLenum pname, GLfloat param);
        void  (*tex_genfv)(GLMContext ctx, GLenum coord, GLenum pname, const GLfloat *params);
        void  (*tex_geni)(GLMContext ctx, GLenum coord, GLenum pname, GLint param);
        void  (*tex_geniv)(GLMContext ctx, GLenum coord, GLenum pname, const GLint *params);
        void  (*feedback_buffer)(GLMContext ctx, GLsizei size, GLenum type, GLfloat *buffer);
        void  (*select_buffer)(GLMContext ctx, GLsizei size, GLuint *buffer);
        GLint (*render_mode)(GLMContext ctx, GLenum mode);
        void  (*init_names)(GLMContext ctx);
        void  (*load_name)(GLMContext ctx, GLuint name);
        void  (*pass_through)(GLMContext ctx, GLfloat token);
        void  (*pop_name)(GLMContext ctx);
        void  (*push_name)(GLMContext ctx, GLuint name);
        void  (*clear_accum)(GLMContext ctx, GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
        void  (*clear_index)(GLMContext ctx, GLfloat c);
        void  (*index_mask)(GLMContext ctx, GLuint mask);
        void  (*accum)(GLMContext ctx, GLenum op, GLfloat value);
        void  (*pop_attrib)(GLMContext ctx);
        void  (*push_attrib)(GLMContext ctx, GLbitfield mask);
        void  (*map1d)(GLMContext ctx, GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);
        void  (*map1f)(GLMContext ctx, GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);
        void  (*map2d)(GLMContext ctx, GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);
        void  (*map2f)(GLMContext ctx, GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);
        void  (*map_grid1d)(GLMContext ctx, GLint un, GLdouble u1, GLdouble u2);
        void  (*map_grid1f)(GLMContext ctx, GLint un, GLfloat u1, GLfloat u2);
        void  (*map_grid2d)(GLMContext ctx, GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
        void  (*map_grid2f)(GLMContext ctx, GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
        void  (*eval_coord1d)(GLMContext ctx, GLdouble u);
        void  (*eval_coord1dv)(GLMContext ctx, const GLdouble *u);
        void  (*eval_coord1f)(GLMContext ctx, GLfloat u);
        void  (*eval_coord1fv)(GLMContext ctx, const GLfloat *u);
        void  (*eval_coord2d)(GLMContext ctx, GLdouble u, GLdouble v);
        void  (*eval_coord2dv)(GLMContext ctx, const GLdouble *u);
        void  (*eval_coord2f)(GLMContext ctx, GLfloat u, GLfloat v);
        void  (*eval_coord2fv)(GLMContext ctx, const GLfloat *u);
        void  (*eval_mesh1)(GLMContext ctx, GLenum mode, GLint i1, GLint i2);
        void  (*eval_point1)(GLMContext ctx, GLint i);
        void  (*eval_mesh2)(GLMContext ctx, GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
        void  (*eval_point2)(GLMContext ctx, GLint i, GLint j);
        void  (*alpha_func)(GLMContext ctx, GLenum func, GLfloat ref);
        void  (*pixel_zoom)(GLMContext ctx, GLfloat xfactor, GLfloat yfactor);
        void  (*pixel_transferf)(GLMContext ctx, GLenum pname, GLfloat param);
        void  (*pixel_transferi)(GLMContext ctx, GLenum pname, GLint param);
        void  (*pixel_mapfv)(GLMContext ctx, GLenum map, GLsizei mapsize, const GLfloat *values);
        void  (*pixel_mapuiv)(GLMContext ctx, GLenum map, GLsizei mapsize, const GLuint *values);
        void  (*pixel_mapusv)(GLMContext ctx, GLenum map, GLsizei mapsize, const GLushort *values);
        void  (*copy_pixels)(GLMContext ctx, GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
        void  (*draw_pixels)(GLMContext ctx, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
        void  (*get_clip_plane)(GLMContext ctx, GLenum plane, GLdouble *equation);
        void  (*get_lightfv)(GLMContext ctx, GLenum light, GLenum pname, GLfloat *params);
        void  (*get_lightiv)(GLMContext ctx, GLenum light, GLenum pname, GLint *params);
        void  (*get_mapdv)(GLMContext ctx, GLenum target, GLenum query, GLdouble *v);
        void  (*get_mapfv)(GLMContext ctx, GLenum target, GLenum query, GLfloat *v);
        void  (*get_mapiv)(GLMContext ctx, GLenum target, GLenum query, GLint *v);
        void  (*get_materialfv)(GLMContext ctx, GLenum face, GLenum pname, GLfloat *params);
        void  (*get_materialiv)(GLMContext ctx, GLenum face, GLenum pname, GLint *params);
        void  (*get_pixel_mapfv)(GLMContext ctx, GLenum map, GLfloat *values);
        void  (*get_pixel_mapuiv)(GLMContext ctx, GLenum map, GLuint *values);
        void  (*get_pixel_mapusv)(GLMContext ctx, GLenum map, GLushort *values);
        void  (*get_polygon_stipple)(GLMContext ctx, GLubyte *mask);
        void  (*get_tex_envfv)(GLMContext ctx, GLenum target, GLenum pname, GLfloat *params);
        void  (*get_tex_enviv)(GLMContext ctx, GLenum target, GLenum pname, GLint *params);
        void  (*get_tex_gendv)(GLMContext ctx, GLenum coord, GLenum pname, GLdouble *params);
        void  (*get_tex_genfv)(GLMContext ctx, GLenum coord, GLenum pname, GLfloat *params);
        void  (*get_tex_geniv)(GLMContext ctx, GLenum coord, GLenum pname, GLint *params);
        GLboolean (*is_list)(GLMContext ctx, GLuint list);
        void  (*frustum)(GLMContext ctx, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
        void  (*load_identity)(GLMContext ctx);
        void  (*load_matrixf)(GLMContext ctx, const GLfloat *m);
        void  (*load_matrixd)(GLMContext ctx, const GLdouble *m);
        void  (*matrix_mode)(GLMContext ctx, GLenum mode);
        void  (*mult_matrixf)(GLMContext ctx, const GLfloat *m);
        void  (*mult_matrixd)(GLMContext ctx, const GLdouble *m);
        void  (*ortho)(GLMContext ctx, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
        void  (*pop_matrix)(GLMContext ctx);
        void  (*push_matrix)(GLMContext ctx);
        void  (*rotated)(GLMContext ctx, GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
        void  (*rotatef)(GLMContext ctx, GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
        void  (*scaled)(GLMContext ctx, GLdouble x, GLdouble y, GLdouble z);
        void  (*scalef)(GLMContext ctx, GLfloat x, GLfloat y, GLfloat z);
        void  (*translated)(GLMContext ctx, GLdouble x, GLdouble y, GLdouble z);
        void  (*translatef)(GLMContext ctx, GLfloat x, GLfloat y, GLfloat z);
        void  (*draw_arrays)(GLMContext ctx, GLenum mode, GLint first, GLsizei count);
        void  (*draw_elements)(GLMContext ctx, GLenum mode, GLsizei count, GLenum type, const void *indices);
        void  (*get_pointerv)(GLMContext ctx, GLenum pname, void **params);
        void  (*polygon_offset)(GLMContext ctx, GLfloat factor, GLfloat units);
        void  (*copy_tex_image1D)(GLMContext ctx, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
        void  (*copy_tex_image2D)(GLMContext ctx, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
        void  (*copy_tex_sub_image1D)(GLMContext ctx, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
        void  (*copy_tex_sub_image2D)(GLMContext ctx, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
        void  (*tex_sub_image1D)(GLMContext ctx, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
        void  (*tex_sub_image2D)(GLMContext ctx, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
        void  (*bind_texture)(GLMContext ctx, GLenum target, GLuint texture);
        void  (*delete_textures)(GLMContext ctx, GLsizei n, const GLuint *textures);
        void  (*gen_textures)(GLMContext ctx, GLsizei n, GLuint *textures);
        GLboolean (*is_texture)(GLMContext ctx, GLuint texture);
        void  (*array_element)(GLMContext ctx, GLint i);
        void  (*color_pointer)(GLMContext ctx, GLint size, GLenum type, GLsizei stride, const void *pointer);
        void  (*disable_client_state)(GLMContext ctx, GLenum array);
        void  (*edge_flag_pointer)(GLMContext ctx, GLsizei stride, const void *pointer);
        void  (*enable_client_state)(GLMContext ctx, GLenum array);
        void  (*index_pointer)(GLMContext ctx, GLenum type, GLsizei stride, const void *pointer);
        void  (*interleaved_arrays)(GLMContext ctx, GLenum format, GLsizei stride, const void *pointer);
        void  (*normal_pointer)(GLMContext ctx, GLenum type, GLsizei stride, const void *pointer);
        void  (*tex_coord_pointer)(GLMContext ctx, GLint size, GLenum type, GLsizei stride, const void *pointer);
        void  (*vertex_pointer)(GLMContext ctx, GLint size, GLenum type, GLsizei stride, const void *pointer);
        GLboolean (*are_textures_resident)(GLMContext ctx, GLsizei n, const GLuint *textures, GLboolean *residences);
        void  (*prioritize_textures)(GLMContext ctx, GLsizei n, const GLuint *textures, const GLfloat *priorities);
        void  (*indexub)(GLMContext ctx, GLubyte c);
        void  (*indexubv)(GLMContext ctx, const GLubyte *c);
        void  (*pop_client_attrib)(GLMContext ctx);
        void  (*push_client_attrib)(GLMContext ctx, GLbitfield mask);
        void  (*draw_range_elements)(GLMContext ctx, GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices);
        void  (*tex_image3D)(GLMContext ctx, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
        void  (*tex_sub_image3D)(GLMContext ctx, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
        void  (*copy_tex_sub_image3D)(GLMContext ctx, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
        void  (*active_texture)(GLMContext ctx, GLenum texture);
        void  (*sample_coverage)(GLMContext ctx, GLfloat value, GLboolean invert);
        void  (*compressed_tex_image3D)(GLMContext ctx, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);
        void  (*compressed_tex_image2D)(GLMContext ctx, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data);
        void  (*compressed_tex_image1D)(GLMContext ctx, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data);
        void  (*compressed_tex_sub_image3D)(GLMContext ctx, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
        void  (*compressed_tex_sub_image2D)(GLMContext ctx, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
        void  (*compressed_tex_sub_image1D)(GLMContext ctx, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
        void  (*get_compressed_tex_image)(GLMContext ctx, GLenum target, GLint level, void *img);
        void  (*client_active_texture)(GLMContext ctx, GLenum texture);
        void  (*multi_tex_coord1d)(GLMContext ctx, GLenum target, GLdouble s);
        void  (*multi_tex_coord1dv)(GLMContext ctx, GLenum target, const GLdouble *v);
        void  (*multi_tex_coord1f)(GLMContext ctx, GLenum target, GLfloat s);
        void  (*multi_tex_coord1fv)(GLMContext ctx, GLenum target, const GLfloat *v);
        void  (*multi_tex_coord1i)(GLMContext ctx, GLenum target, GLint s);
        void  (*multi_tex_coord1iv)(GLMContext ctx, GLenum target, const GLint *v);
        void  (*multi_tex_coord1s)(GLMContext ctx, GLenum target, GLshort s);
        void  (*multi_tex_coord1sv)(GLMContext ctx, GLenum target, const GLshort *v);
        void  (*multi_tex_coord2d)(GLMContext ctx, GLenum target, GLdouble s, GLdouble t);
        void  (*multi_tex_coord2dv)(GLMContext ctx, GLenum target, const GLdouble *v);
        void  (*multi_tex_coord2f)(GLMContext ctx, GLenum target, GLfloat s, GLfloat t);
        void  (*multi_tex_coord2fv)(GLMContext ctx, GLenum target, const GLfloat *v);
        void  (*multi_tex_coord2i)(GLMContext ctx, GLenum target, GLint s, GLint t);
        void  (*multi_tex_coord2iv)(GLMContext ctx, GLenum target, const GLint *v);
        void  (*multi_tex_coord2s)(GLMContext ctx, GLenum target, GLshort s, GLshort t);
        void  (*multi_tex_coord2sv)(GLMContext ctx, GLenum target, const GLshort *v);
        void  (*multi_tex_coord3d)(GLMContext ctx, GLenum target, GLdouble s, GLdouble t, GLdouble r);
        void  (*multi_tex_coord3dv)(GLMContext ctx, GLenum target, const GLdouble *v);
        void  (*multi_tex_coord3f)(GLMContext ctx, GLenum target, GLfloat s, GLfloat t, GLfloat r);
        void  (*multi_tex_coord3fv)(GLMContext ctx, GLenum target, const GLfloat *v);
        void  (*multi_tex_coord3i)(GLMContext ctx, GLenum target, GLint s, GLint t, GLint r);
        void  (*multi_tex_coord3iv)(GLMContext ctx, GLenum target, const GLint *v);
        void  (*multi_tex_coord3s)(GLMContext ctx, GLenum target, GLshort s, GLshort t, GLshort r);
        void  (*multi_tex_coord3sv)(GLMContext ctx, GLenum target, const GLshort *v);
        void  (*multi_tex_coord4d)(GLMContext ctx, GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
        void  (*multi_tex_coord4dv)(GLMContext ctx, GLenum target, const GLdouble *v);
        void  (*multi_tex_coord4f)(GLMContext ctx, GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
        void  (*multi_tex_coord4fv)(GLMContext ctx, GLenum target, const GLfloat *v);
        void  (*multi_tex_coord4i)(GLMContext ctx, GLenum target, GLint s, GLint t, GLint r, GLint q);
        void  (*multi_tex_coord4iv)(GLMContext ctx, GLenum target, const GLint *v);
        void  (*multi_tex_coord4s)(GLMContext ctx, GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
        void  (*multi_tex_coord4sv)(GLMContext ctx, GLenum target, const GLshort *v);
        void  (*load_transpose_matrixf)(GLMContext ctx, const GLfloat *m);
        void  (*load_transpose_matrixd)(GLMContext ctx, const GLdouble *m);
        void  (*mult_transpose_matrixf)(GLMContext ctx, const GLfloat *m);
        void  (*mult_transpose_matrixd)(GLMContext ctx, const GLdouble *m);
        void  (*blend_func_separate)(GLMContext ctx, GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
        void  (*multi_draw_arrays)(GLMContext ctx, GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount);
        void  (*multi_draw_elements)(GLMContext ctx, GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount);
        void  (*point_parameterf)(GLMContext ctx, GLenum pname, GLfloat param);
        void  (*point_parameterfv)(GLMContext ctx, GLenum pname, const GLfloat *params);
        void  (*point_parameteri)(GLMContext ctx, GLenum pname, GLint param);
        void  (*point_parameteriv)(GLMContext ctx, GLenum pname, const GLint *params);
        void  (*fog_coordf)(GLMContext ctx, GLfloat coord);
        void  (*fog_coordfv)(GLMContext ctx, const GLfloat *coord);
        void  (*fog_coordd)(GLMContext ctx, GLdouble coord);
        void  (*fog_coorddv)(GLMContext ctx, const GLdouble *coord);
        void  (*fog_coord_pointer)(GLMContext ctx, GLenum type, GLsizei stride, const void *pointer);
        void  (*secondary_color3b)(GLMContext ctx, GLbyte red, GLbyte green, GLbyte blue);
        void  (*secondary_color3bv)(GLMContext ctx, const GLbyte *v);
        void  (*secondary_color3d)(GLMContext ctx, GLdouble red, GLdouble green, GLdouble blue);
        void  (*secondary_color3dv)(GLMContext ctx, const GLdouble *v);
        void  (*secondary_color3f)(GLMContext ctx, GLfloat red, GLfloat green, GLfloat blue);
        void  (*secondary_color3fv)(GLMContext ctx, const GLfloat *v);
        void  (*secondary_color3i)(GLMContext ctx, GLint red, GLint green, GLint blue);
        void  (*secondary_color3iv)(GLMContext ctx, const GLint *v);
        void  (*secondary_color3s)(GLMContext ctx, GLshort red, GLshort green, GLshort blue);
        void  (*secondary_color3sv)(GLMContext ctx, const GLshort *v);
        void  (*secondary_color3ub)(GLMContext ctx, GLubyte red, GLubyte green, GLubyte blue);
        void  (*secondary_color3ubv)(GLMContext ctx, const GLubyte *v);
        void  (*secondary_color3ui)(GLMContext ctx, GLuint red, GLuint green, GLuint blue);
        void  (*secondary_color3uiv)(GLMContext ctx, const GLuint *v);
        void  (*secondary_color3us)(GLMContext ctx, GLushort red, GLushort green, GLushort blue);
        void  (*secondary_color3usv)(GLMContext ctx, const GLushort *v);
        void  (*secondary_color_pointer)(GLMContext ctx, GLint size, GLenum type, GLsizei stride, const void *pointer);
        void  (*window_pos2d)(GLMContext ctx, GLdouble x, GLdouble y);
        void  (*window_pos2dv)(GLMContext ctx, const GLdouble *v);
        void  (*window_pos2f)(GLMContext ctx, GLfloat x, GLfloat y);
        void  (*window_pos2fv)(GLMContext ctx, const GLfloat *v);
        void  (*window_pos2i)(GLMContext ctx, GLint x, GLint y);
        void  (*window_pos2iv)(GLMContext ctx, const GLint *v);
        void  (*window_pos2s)(GLMContext ctx, GLshort x, GLshort y);
        void  (*window_pos2sv)(GLMContext ctx, const GLshort *v);
        void  (*window_pos3d)(GLMContext ctx, GLdouble x, GLdouble y, GLdouble z);
        void  (*window_pos3dv)(GLMContext ctx, const GLdouble *v);
        void  (*window_pos3f)(GLMContext ctx, GLfloat x, GLfloat y, GLfloat z);
        void  (*window_pos3fv)(GLMContext ctx, const GLfloat *v);
        void  (*window_pos3i)(GLMContext ctx, GLint x, GLint y, GLint z);
        void  (*window_pos3iv)(GLMContext ctx, const GLint *v);
        void  (*window_pos3s)(GLMContext ctx, GLshort x, GLshort y, GLshort z);
        void  (*window_pos3sv)(GLMContext ctx, const GLshort *v);
        void  (*blend_color)(GLMContext ctx, GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
        void  (*blend_equation)(GLMContext ctx, GLenum mode);
        void  (*gen_queries)(GLMContext ctx, GLsizei n, GLuint *ids);
        void  (*delete_queries)(GLMContext ctx, GLsizei n, const GLuint *ids);
        GLboolean (*is_query)(GLMContext ctx, GLuint id);
        void  (*begin_query)(GLMContext ctx, GLenum target, GLuint id);
        void  (*end_query)(GLMContext ctx, GLenum target);
        void  (*get_queryiv)(GLMContext ctx, GLenum target, GLenum pname, GLint *params);
        void  (*get_query_objectiv)(GLMContext ctx, GLuint id, GLenum pname, GLint *params);
        void  (*get_query_objectuiv)(GLMContext ctx, GLuint id, GLenum pname, GLuint *params);
        void  (*bind_buffer)(GLMContext ctx, GLenum target, GLuint buffer);
        void  (*delete_buffers)(GLMContext ctx, GLsizei n, const GLuint *buffers);
        void  (*gen_buffers)(GLMContext ctx, GLsizei n, GLuint *buffers);
        GLboolean (*is_buffer)(GLMContext ctx, GLuint buffer);
        void  (*buffer_data)(GLMContext ctx, GLenum target, GLsizeiptr size, const void *data, GLenum usage);
        void  (*buffer_sub_data)(GLMContext ctx, GLenum target, GLintptr offset, GLsizeiptr size, const void *data);
        void  (*get_buffer_sub_data)(GLMContext ctx, GLenum target, GLintptr offset, GLsizeiptr size, void *data);
        void * (*map_buffer)(GLMContext ctx, GLenum target, GLenum access);
        GLboolean (*unmap_buffer)(GLMContext ctx, GLenum target);
        void  (*get_buffer_parameteriv)(GLMContext ctx, GLenum target, GLenum pname, GLint *params);
        void  (*get_buffer_pointerv)(GLMContext ctx, GLenum target, GLenum pname, void **params);
        void  (*blend_equation_separate)(GLMContext ctx, GLenum modeRGB, GLenum modeAlpha);
        void  (*draw_buffers)(GLMContext ctx, GLsizei n, const GLenum *bufs);
        void  (*stencil_op_separate)(GLMContext ctx, GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
        void  (*stencil_func_separate)(GLMContext ctx, GLenum face, GLenum func, GLint ref, GLuint mask);
        void  (*stencil_mask_separate)(GLMContext ctx, GLenum face, GLuint mask);
        void  (*attach_shader)(GLMContext ctx, GLuint program, GLuint shader);
        void  (*bind_attrib_location)(GLMContext ctx, GLuint program, GLuint index, const GLchar *name);
        void  (*compile_shader)(GLMContext ctx, GLuint shader);
        GLuint (*create_program)(GLMContext ctx);
        GLuint (*create_shader)(GLMContext ctx, GLenum type);
        void  (*delete_program)(GLMContext ctx, GLuint program);
        void  (*delete_shader)(GLMContext ctx, GLuint shader);
        void  (*detach_shader)(GLMContext ctx, GLuint program, GLuint shader);
        void  (*disable_vertex_attrib_array)(GLMContext ctx, GLuint index);
        void  (*enable_vertex_attrib_array)(GLMContext ctx, GLuint index);
        void  (*get_active_attrib)(GLMContext ctx, GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
        void  (*get_active_uniform)(GLMContext ctx, GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
        void  (*get_attached_shaders)(GLMContext ctx, GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders);
        GLint (*get_attrib_location)(GLMContext ctx, GLuint program, const GLchar *name);
        void  (*get_programiv)(GLMContext ctx, GLuint program, GLenum pname, GLint *params);
        void  (*get_program_info_log)(GLMContext ctx, GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
        void  (*get_shaderiv)(GLMContext ctx, GLuint shader, GLenum pname, GLint *params);
        void  (*get_shader_info_log)(GLMContext ctx, GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
        void  (*get_shader_source)(GLMContext ctx, GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
        GLint (*get_uniform_location)(GLMContext ctx, GLuint program, const GLchar *name);
        void  (*get_uniformfv)(GLMContext ctx, GLuint program, GLint location, GLfloat *params);
        void  (*get_uniformiv)(GLMContext ctx, GLuint program, GLint location, GLint *params);
        void  (*get_vertex_attribdv)(GLMContext ctx, GLuint index, GLenum pname, GLdouble *params);
        void  (*get_vertex_attribfv)(GLMContext ctx, GLuint index, GLenum pname, GLfloat *params);
        void  (*get_vertex_attribiv)(GLMContext ctx, GLuint index, GLenum pname, GLint *params);
        void  (*get_vertex_attrib_pointerv)(GLMContext ctx, GLuint index, GLenum pname, void **pointer);
        GLboolean (*is_program)(GLMContext ctx, GLuint program);
        GLboolean (*is_shader)(GLMContext ctx, GLuint shader);
        void  (*link_program)(GLMContext ctx, GLuint program);
        void  (*shader_source)(GLMContext ctx, GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length);
        void  (*use_program)(GLMContext ctx, GLuint program);
        void  (*uniform1f)(GLMContext ctx, GLint location, GLfloat v0);
        void  (*uniform2f)(GLMContext ctx, GLint location, GLfloat v0, GLfloat v1);
        void  (*uniform3f)(GLMContext ctx, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
        void  (*uniform4f)(GLMContext ctx, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
        void  (*uniform1i)(GLMContext ctx, GLint location, GLint v0);
        void  (*uniform2i)(GLMContext ctx, GLint location, GLint v0, GLint v1);
        void  (*uniform3i)(GLMContext ctx, GLint location, GLint v0, GLint v1, GLint v2);
        void  (*uniform4i)(GLMContext ctx, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
        void  (*uniform1fv)(GLMContext ctx, GLint location, GLsizei count, const GLfloat *value);
        void  (*uniform2fv)(GLMContext ctx, GLint location, GLsizei count, const GLfloat *value);
        void  (*uniform3fv)(GLMContext ctx, GLint location, GLsizei count, const GLfloat *value);
        void  (*uniform4fv)(GLMContext ctx, GLint location, GLsizei count, const GLfloat *value);
        void  (*uniform1iv)(GLMContext ctx, GLint location, GLsizei count, const GLint *value);
        void  (*uniform2iv)(GLMContext ctx, GLint location, GLsizei count, const GLint *value);
        void  (*uniform3iv)(GLMContext ctx, GLint location, GLsizei count, const GLint *value);
        void  (*uniform4iv)(GLMContext ctx, GLint location, GLsizei count, const GLint *value);
        void  (*uniform_matrix2fv)(GLMContext ctx, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
        void  (*uniform_matrix3fv)(GLMContext ctx, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
        void  (*uniform_matrix4fv)(GLMContext ctx, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
        void  (*validate_program)(GLMContext ctx, GLuint program);
        void  (*vertex_attrib1d)(GLMContext ctx, GLuint index, GLdouble x);
        void  (*vertex_attrib1dv)(GLMContext ctx, GLuint index, const GLdouble *v);
        void  (*vertex_attrib1f)(GLMContext ctx, GLuint index, GLfloat x);
        void  (*vertex_attrib1fv)(GLMContext ctx, GLuint index, const GLfloat *v);
        void  (*vertex_attrib1s)(GLMContext ctx, GLuint index, GLshort x);
        void  (*vertex_attrib1sv)(GLMContext ctx, GLuint index, const GLshort *v);
        void  (*vertex_attrib2d)(GLMContext ctx, GLuint index, GLdouble x, GLdouble y);
        void  (*vertex_attrib2dv)(GLMContext ctx, GLuint index, const GLdouble *v);
        void  (*vertex_attrib2f)(GLMContext ctx, GLuint index, GLfloat x, GLfloat y);
        void  (*vertex_attrib2fv)(GLMContext ctx, GLuint index, const GLfloat *v);
        void  (*vertex_attrib2s)(GLMContext ctx, GLuint index, GLshort x, GLshort y);
        void  (*vertex_attrib2sv)(GLMContext ctx, GLuint index, const GLshort *v);
        void  (*vertex_attrib3d)(GLMContext ctx, GLuint index, GLdouble x, GLdouble y, GLdouble z);
        void  (*vertex_attrib3dv)(GLMContext ctx, GLuint index, const GLdouble *v);
        void  (*vertex_attrib3f)(GLMContext ctx, GLuint index, GLfloat x, GLfloat y, GLfloat z);
        void  (*vertex_attrib3fv)(GLMContext ctx, GLuint index, const GLfloat *v);
        void  (*vertex_attrib3s)(GLMContext ctx, GLuint index, GLshort x, GLshort y, GLshort z);
        void  (*vertex_attrib3sv)(GLMContext ctx, GLuint index, const GLshort *v);
        void  (*vertex_attrib4_nbv)(GLMContext ctx, GLuint index, const GLbyte *v);
        void  (*vertex_attrib4_niv)(GLMContext ctx, GLuint index, const GLint *v);
        void  (*vertex_attrib4_nsv)(GLMContext ctx, GLuint index, const GLshort *v);
        void  (*vertex_attrib4_nub)(GLMContext ctx, GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
        void  (*vertex_attrib4_nubv)(GLMContext ctx, GLuint index, const GLubyte *v);
        void  (*vertex_attrib4_nuiv)(GLMContext ctx, GLuint index, const GLuint *v);
        void  (*vertex_attrib4_nusv)(GLMContext ctx, GLuint index, const GLushort *v);
        void  (*vertex_attrib4bv)(GLMContext ctx, GLuint index, const GLbyte *v);
        void  (*vertex_attrib4d)(GLMContext ctx, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
        void  (*vertex_attrib4dv)(GLMContext ctx, GLuint index, const GLdouble *v);
        void  (*vertex_attrib4f)(GLMContext ctx, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
        void  (*vertex_attrib4fv)(GLMContext ctx, GLuint index, const GLfloat *v);
        void  (*vertex_attrib4iv)(GLMContext ctx, GLuint index, const GLint *v);
        void  (*vertex_attrib4s)(GLMContext ctx, GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
        void  (*vertex_attrib4sv)(GLMContext ctx, GLuint index, const GLshort *v);
        void  (*vertex_attrib4ubv)(GLMContext ctx, GLuint index, const GLubyte *v);
        void  (*vertex_attrib4uiv)(GLMContext ctx, GLuint index, const GLuint *v);
        void  (*vertex_attrib4usv)(GLMContext ctx, GLuint index, const GLushort *v);
        void  (*vertex_attrib_pointer)(GLMContext ctx, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer);
        void  (*uniform_matrix2x3fv)(GLMContext ctx, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
        void  (*uniform_matrix3x2fv)(GLMContext ctx, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
        void  (*uniform_matrix2x4fv)(GLMContext ctx, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
        void  (*uniform_matrix4x2fv)(GLMContext ctx, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
        void  (*uniform_matrix3x4fv)(GLMContext ctx, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
        void  (*uniform_matrix4x3fv)(GLMContext ctx, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
        void  (*color_maski)(GLMContext ctx, GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
        void  (*get_booleani_v)(GLMContext ctx, GLenum target, GLuint index, GLboolean *data);
        void  (*get_integeri_v)(GLMContext ctx, GLenum target, GLuint index, GLint *data);
        void  (*enablei)(GLMContext ctx, GLenum target, GLuint index);
        void  (*disablei)(GLMContext ctx, GLenum target, GLuint index);
        GLboolean (*is_enabledi)(GLMContext ctx, GLenum target, GLuint index);
        void  (*begin_transform_feedback)(GLMContext ctx, GLenum primitiveMode);
        void  (*end_transform_feedback)(GLMContext ctx);
        void  (*bind_buffer_range)(GLMContext ctx, GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
        void  (*bind_buffer_base)(GLMContext ctx, GLenum target, GLuint index, GLuint buffer);
        void  (*transform_feedback_varyings)(GLMContext ctx, GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode);
        void  (*get_transform_feedback_varying)(GLMContext ctx, GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
        void  (*clamp_color)(GLMContext ctx, GLenum target, GLenum clamp);
        void  (*begin_conditional_render)(GLMContext ctx, GLuint id, GLenum mode);
        void  (*end_conditional_render)(GLMContext ctx);
        void  (*vertex_attrib_i_pointer)(GLMContext ctx, GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
        void  (*get_vertex_attrib_iiv)(GLMContext ctx, GLuint index, GLenum pname, GLint *params);
        void  (*get_vertex_attrib_iuiv)(GLMContext ctx, GLuint index, GLenum pname, GLuint *params);
        void  (*vertex_attrib_i1i)(GLMContext ctx, GLuint index, GLint x);
        void  (*vertex_attrib_i2i)(GLMContext ctx, GLuint index, GLint x, GLint y);
        void  (*vertex_attrib_i3i)(GLMContext ctx, GLuint index, GLint x, GLint y, GLint z);
        void  (*vertex_attrib_i4i)(GLMContext ctx, GLuint index, GLint x, GLint y, GLint z, GLint w);
        void  (*vertex_attrib_i1ui)(GLMContext ctx, GLuint index, GLuint x);
        void  (*vertex_attrib_i2ui)(GLMContext ctx, GLuint index, GLuint x, GLuint y);
        void  (*vertex_attrib_i3ui)(GLMContext ctx, GLuint index, GLuint x, GLuint y, GLuint z);
        void  (*vertex_attrib_i4ui)(GLMContext ctx, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
        void  (*vertex_attrib_i1iv)(GLMContext ctx, GLuint index, const GLint *v);
        void  (*vertex_attrib_i2iv)(GLMContext ctx, GLuint index, const GLint *v);
        void  (*vertex_attrib_i3iv)(GLMContext ctx, GLuint index, const GLint *v);
        void  (*vertex_attrib_i4iv)(GLMContext ctx, GLuint index, const GLint *v);
        void  (*vertex_attrib_i1uiv)(GLMContext ctx, GLuint index, const GLuint *v);
        void  (*vertex_attrib_i2uiv)(GLMContext ctx, GLuint index, const GLuint *v);
        void  (*vertex_attrib_i3uiv)(GLMContext ctx, GLuint index, const GLuint *v);
        void  (*vertex_attrib_i4uiv)(GLMContext ctx, GLuint index, const GLuint *v);
        void  (*vertex_attrib_i4bv)(GLMContext ctx, GLuint index, const GLbyte *v);
        void  (*vertex_attrib_i4sv)(GLMContext ctx, GLuint index, const GLshort *v);
        void  (*vertex_attrib_i4ubv)(GLMContext ctx, GLuint index, const GLubyte *v);
        void  (*vertex_attrib_i4usv)(GLMContext ctx, GLuint index, const GLushort *v);
        void  (*get_uniformuiv)(GLMContext ctx, GLuint program, GLint location, GLuint *params);
        void  (*bind_frag_data_location)(GLMContext ctx, GLuint program, GLuint color, const GLchar *name);
        GLint (*get_frag_data_location)(GLMContext ctx, GLuint program, const GLchar *name);
        void  (*uniform1ui)(GLMContext ctx, GLint location, GLuint v0);
        void  (*uniform2ui)(GLMContext ctx, GLint location, GLuint v0, GLuint v1);
        void  (*uniform3ui)(GLMContext ctx, GLint location, GLuint v0, GLuint v1, GLuint v2);
        void  (*uniform4ui)(GLMContext ctx, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
        void  (*uniform1uiv)(GLMContext ctx, GLint location, GLsizei count, const GLuint *value);
        void  (*uniform2uiv)(GLMContext ctx, GLint location, GLsizei count, const GLuint *value);
        void  (*uniform3uiv)(GLMContext ctx, GLint location, GLsizei count, const GLuint *value);
        void  (*uniform4uiv)(GLMContext ctx, GLint location, GLsizei count, const GLuint *value);
        void  (*tex_parameter_iiv)(GLMContext ctx, GLenum target, GLenum pname, const GLint *params);
        void  (*tex_parameter_iuiv)(GLMContext ctx, GLenum target, GLenum pname, const GLuint *params);
        void  (*get_tex_parameter_iiv)(GLMContext ctx, GLenum target, GLenum pname, GLint *params);
        void  (*get_tex_parameter_iuiv)(GLMContext ctx, GLenum target, GLenum pname, GLuint *params);
        void  (*clear_bufferiv)(GLMContext ctx, GLenum buffer, GLint drawbuffer, const GLint *value);
        void  (*clear_bufferuiv)(GLMContext ctx, GLenum buffer, GLint drawbuffer, const GLuint *value);
        void  (*clear_bufferfv)(GLMContext ctx, GLenum buffer, GLint drawbuffer, const GLfloat *value);
        void  (*clear_bufferfi)(GLMContext ctx, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
        const GLubyte *(*get_stringi)(GLMContext ctx, GLenum name, GLuint index);
        GLboolean (*is_renderbuffer)(GLMContext ctx, GLuint renderbuffer);
        void  (*bind_renderbuffer)(GLMContext ctx, GLenum target, GLuint renderbuffer);
        void  (*delete_renderbuffers)(GLMContext ctx, GLsizei n, const GLuint *renderbuffers);
        void  (*gen_renderbuffers)(GLMContext ctx, GLsizei n, GLuint *renderbuffers);
        void  (*renderbuffer_storage)(GLMContext ctx, GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
        void  (*get_renderbuffer_parameteriv)(GLMContext ctx, GLenum target, GLenum pname, GLint *params);
        GLboolean (*is_framebuffer)(GLMContext ctx, GLuint framebuffer);
        void  (*bind_framebuffer)(GLMContext ctx, GLenum target, GLuint framebuffer);
        void  (*delete_framebuffers)(GLMContext ctx, GLsizei n, const GLuint *framebuffers);
        void  (*gen_framebuffers)(GLMContext ctx, GLsizei n, GLuint *framebuffers);
        GLenum (*check_framebuffer_status)(GLMContext ctx, GLenum target);
        void  (*framebuffer_texture1D)(GLMContext ctx, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
        void  (*framebuffer_texture2D)(GLMContext ctx, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
        void  (*framebuffer_texture3D)(GLMContext ctx, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
        void  (*framebuffer_renderbuffer)(GLMContext ctx, GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
        void  (*get_framebuffer_attachment_parameteriv)(GLMContext ctx, GLenum target, GLenum attachment, GLenum pname, GLint *params);
        void  (*generate_mipmap)(GLMContext ctx, GLenum target);
        void  (*blit_framebuffer)(GLMContext ctx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
        void  (*renderbuffer_storage_multisample)(GLMContext ctx, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
        void  (*framebuffer_texture_layer)(GLMContext ctx, GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
        void * (*map_buffer_range)(GLMContext ctx, GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
        void  (*flush_mapped_buffer_range)(GLMContext ctx, GLenum target, GLintptr offset, GLsizeiptr length);
        void  (*bind_vertex_array)(GLMContext ctx, GLuint array);
        void  (*delete_vertex_arrays)(GLMContext ctx, GLsizei n, const GLuint *arrays);
        void  (*gen_vertex_arrays)(GLMContext ctx, GLsizei n, GLuint *arrays);
        GLboolean (*is_vertex_array)(GLMContext ctx, GLuint array);
        void  (*draw_arrays_instanced)(GLMContext ctx, GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
        void  (*draw_elements_instanced)(GLMContext ctx, GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount);
        void  (*tex_buffer)(GLMContext ctx, GLenum target, GLenum internalformat, GLuint buffer);
        void  (*primitive_restart_index)(GLMContext ctx, GLuint index);
        void  (*copy_buffer_sub_data)(GLMContext ctx, GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
        void  (*get_uniform_indices)(GLMContext ctx, GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices);
        void  (*get_active_uniformsiv)(GLMContext ctx, GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
        void  (*get_active_uniform_name)(GLMContext ctx, GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
        GLuint (*get_uniform_block_index)(GLMContext ctx, GLuint program, const GLchar *uniformBlockName);
        void  (*get_active_uniform_blockiv)(GLMContext ctx, GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
        void  (*get_active_uniform_block_name)(GLMContext ctx, GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
        void  (*uniform_block_binding)(GLMContext ctx, GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
        void  (*draw_elements_base_vertex)(GLMContext ctx, GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex);
        void  (*draw_range_elements_base_vertex)(GLMContext ctx, GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex);
        void  (*draw_elements_instanced_base_vertex)(GLMContext ctx, GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex);
        void  (*multi_draw_elements_base_vertex)(GLMContext ctx, GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex);
        void  (*provoking_vertex)(GLMContext ctx, GLenum mode);
        GLsync (*fence_sync)(GLMContext ctx, GLenum condition, GLbitfield flags);
        GLboolean (*is_sync)(GLMContext ctx, GLsync sync);
        void  (*delete_sync)(GLMContext ctx, GLsync sync);
        GLenum (*client_wait_sync)(GLMContext ctx, GLsync sync, GLbitfield flags, GLuint64 timeout);
        void  (*wait_sync)(GLMContext ctx, GLsync sync, GLbitfield flags, GLuint64 timeout);
        void  (*get_integer64v)(GLMContext ctx, GLenum pname, GLint64 *data);
        void  (*get_synciv)(GLMContext ctx, GLsync sync, GLenum pname, GLsizei count, GLsizei *length, GLint *values);
        void  (*get_integer64i_v)(GLMContext ctx, GLenum target, GLuint index, GLint64 *data);
        void  (*get_buffer_parameteri64v)(GLMContext ctx, GLenum target, GLenum pname, GLint64 *params);
        void  (*framebuffer_texture)(GLMContext ctx, GLenum target, GLenum attachment, GLuint texture, GLint level);
        void  (*tex_image2_d_multisample)(GLMContext ctx, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
        void  (*tex_image3_d_multisample)(GLMContext ctx, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
        void  (*get_multisamplefv)(GLMContext ctx, GLenum pname, GLuint index, GLfloat *val);
        void  (*sample_maski)(GLMContext ctx, GLuint maskNumber, GLbitfield mask);
        void  (*bind_frag_data_location_indexed)(GLMContext ctx, GLuint program, GLuint colorNumber, GLuint index, const GLchar *name);
        GLint (*get_frag_data_index)(GLMContext ctx, GLuint program, const GLchar *name);
        void  (*gen_samplers)(GLMContext ctx, GLsizei count, GLuint *samplers);
        void  (*delete_samplers)(GLMContext ctx, GLsizei count, const GLuint *samplers);
        GLboolean (*is_sampler)(GLMContext ctx, GLuint sampler);
        void  (*bind_sampler)(GLMContext ctx, GLuint unit, GLuint sampler);
        void  (*sampler_parameteri)(GLMContext ctx, GLuint sampler, GLenum pname, GLint param);
        void  (*sampler_parameteriv)(GLMContext ctx, GLuint sampler, GLenum pname, const GLint *param);
        void  (*sampler_parameterf)(GLMContext ctx, GLuint sampler, GLenum pname, GLfloat param);
        void  (*sampler_parameterfv)(GLMContext ctx, GLuint sampler, GLenum pname, const GLfloat *param);
        void  (*sampler_parameter_iiv)(GLMContext ctx, GLuint sampler, GLenum pname, const GLint *param);
        void  (*sampler_parameter_iuiv)(GLMContext ctx, GLuint sampler, GLenum pname, const GLuint *param);
        void  (*get_sampler_parameteriv)(GLMContext ctx, GLuint sampler, GLenum pname, GLint *params);
        void  (*get_sampler_parameter_iiv)(GLMContext ctx, GLuint sampler, GLenum pname, GLint *params);
        void  (*get_sampler_parameterfv)(GLMContext ctx, GLuint sampler, GLenum pname, GLfloat *params);
        void  (*get_sampler_parameter_iuiv)(GLMContext ctx, GLuint sampler, GLenum pname, GLuint *params);
        void  (*query_counter)(GLMContext ctx, GLuint id, GLenum target);
        void  (*get_query_objecti64v)(GLMContext ctx, GLuint id, GLenum pname, GLint64 *params);
        void  (*get_query_objectui64v)(GLMContext ctx, GLuint id, GLenum pname, GLuint64 *params);
        void  (*vertex_attrib_divisor)(GLMContext ctx, GLuint index, GLuint divisor);
        void  (*vertex_attrib_p1ui)(GLMContext ctx, GLuint index, GLenum type, GLboolean normalized, GLuint value);
        void  (*vertex_attrib_p1uiv)(GLMContext ctx, GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
        void  (*vertex_attrib_p2ui)(GLMContext ctx, GLuint index, GLenum type, GLboolean normalized, GLuint value);
        void  (*vertex_attrib_p2uiv)(GLMContext ctx, GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
        void  (*vertex_attrib_p3ui)(GLMContext ctx, GLuint index, GLenum type, GLboolean normalized, GLuint value);
        void  (*vertex_attrib_p3uiv)(GLMContext ctx, GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
        void  (*vertex_attrib_p4ui)(GLMContext ctx, GLuint index, GLenum type, GLboolean normalized, GLuint value);
        void  (*vertex_attrib_p4uiv)(GLMContext ctx, GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
        void  (*vertex_p2ui)(GLMContext ctx, GLenum type, GLuint value);
        void  (*vertex_p2uiv)(GLMContext ctx, GLenum type, const GLuint *value);
        void  (*vertex_p3ui)(GLMContext ctx, GLenum type, GLuint value);
        void  (*vertex_p3uiv)(GLMContext ctx, GLenum type, const GLuint *value);
        void  (*vertex_p4ui)(GLMContext ctx, GLenum type, GLuint value);
        void  (*vertex_p4uiv)(GLMContext ctx, GLenum type, const GLuint *value);
        void  (*tex_coord_p1ui)(GLMContext ctx, GLenum type, GLuint coords);
        void  (*tex_coord_p1uiv)(GLMContext ctx, GLenum type, const GLuint *coords);
        void  (*tex_coord_p2ui)(GLMContext ctx, GLenum type, GLuint coords);
        void  (*tex_coord_p2uiv)(GLMContext ctx, GLenum type, const GLuint *coords);
        void  (*tex_coord_p3ui)(GLMContext ctx, GLenum type, GLuint coords);
        void  (*tex_coord_p3uiv)(GLMContext ctx, GLenum type, const GLuint *coords);
        void  (*tex_coord_p4ui)(GLMContext ctx, GLenum type, GLuint coords);
        void  (*tex_coord_p4uiv)(GLMContext ctx, GLenum type, const GLuint *coords);
        void  (*multi_tex_coord_p1ui)(GLMContext ctx, GLenum texture, GLenum type, GLuint coords);
        void  (*multi_tex_coord_p1uiv)(GLMContext ctx, GLenum texture, GLenum type, const GLuint *coords);
        void  (*multi_tex_coord_p2ui)(GLMContext ctx, GLenum texture, GLenum type, GLuint coords);
        void  (*multi_tex_coord_p2uiv)(GLMContext ctx, GLenum texture, GLenum type, const GLuint *coords);
        void  (*multi_tex_coord_p3ui)(GLMContext ctx, GLenum texture, GLenum type, GLuint coords);
        void  (*multi_tex_coord_p3uiv)(GLMContext ctx, GLenum texture, GLenum type, const GLuint *coords);
        void  (*multi_tex_coord_p4ui)(GLMContext ctx, GLenum texture, GLenum type, GLuint coords);
        void  (*multi_tex_coord_p4uiv)(GLMContext ctx, GLenum texture, GLenum type, const GLuint *coords);
        void  (*normal_p3ui)(GLMContext ctx, GLenum type, GLuint coords);
        void  (*normal_p3uiv)(GLMContext ctx, GLenum type, const GLuint *coords);
        void  (*color_p3ui)(GLMContext ctx, GLenum type, GLuint color);
        void  (*color_p3uiv)(GLMContext ctx, GLenum type, const GLuint *color);
        void  (*color_p4ui)(GLMContext ctx, GLenum type, GLuint color);
        void  (*color_p4uiv)(GLMContext ctx, GLenum type, const GLuint *color);
        void  (*secondary_color_p3ui)(GLMContext ctx, GLenum type, GLuint color);
        void  (*secondary_color_p3uiv)(GLMContext ctx, GLenum type, const GLuint *color);
        void  (*min_sample_shading)(GLMContext ctx, GLfloat value);
        void  (*blend_equationi)(GLMContext ctx, GLuint buf, GLenum mode);
        void  (*blend_equation_separatei)(GLMContext ctx, GLuint buf, GLenum modeRGB, GLenum modeAlpha);
        void  (*blend_funci)(GLMContext ctx, GLuint buf, GLenum src, GLenum dst);
        void  (*blend_func_separatei)(GLMContext ctx, GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
        void  (*draw_arrays_indirect)(GLMContext ctx, GLenum mode, const void *indirect);
        void  (*draw_elements_indirect)(GLMContext ctx, GLenum mode, GLenum type, const void *indirect);
        void  (*uniform1d)(GLMContext ctx, GLint location, GLdouble x);
        void  (*uniform2d)(GLMContext ctx, GLint location, GLdouble x, GLdouble y);
        void  (*uniform3d)(GLMContext ctx, GLint location, GLdouble x, GLdouble y, GLdouble z);
        void  (*uniform4d)(GLMContext ctx, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
        void  (*uniform1dv)(GLMContext ctx, GLint location, GLsizei count, const GLdouble *value);
        void  (*uniform2dv)(GLMContext ctx, GLint location, GLsizei count, const GLdouble *value);
        void  (*uniform3dv)(GLMContext ctx, GLint location, GLsizei count, const GLdouble *value);
        void  (*uniform4dv)(GLMContext ctx, GLint location, GLsizei count, const GLdouble *value);
        void  (*uniform_matrix2dv)(GLMContext ctx, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
        void  (*uniform_matrix3dv)(GLMContext ctx, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
        void  (*uniform_matrix4dv)(GLMContext ctx, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
        void  (*uniform_matrix2x3dv)(GLMContext ctx, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
        void  (*uniform_matrix2x4dv)(GLMContext ctx, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
        void  (*uniform_matrix3x2dv)(GLMContext ctx, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
        void  (*uniform_matrix3x4dv)(GLMContext ctx, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
        void  (*uniform_matrix4x2dv)(GLMContext ctx, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
        void  (*uniform_matrix4x3dv)(GLMContext ctx, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
        void  (*get_uniformdv)(GLMContext ctx, GLuint program, GLint location, GLdouble *params);
        GLint (*get_subroutine_uniform_location)(GLMContext ctx, GLuint program, GLenum shadertype, const GLchar *name);
        GLuint (*get_subroutine_index)(GLMContext ctx, GLuint program, GLenum shadertype, const GLchar *name);
        void  (*get_active_subroutine_uniformiv)(GLMContext ctx, GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values);
        void  (*get_active_subroutine_uniform_name)(GLMContext ctx, GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
        void  (*get_active_subroutine_name)(GLMContext ctx, GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
        void  (*uniform_subroutinesuiv)(GLMContext ctx, GLenum shadertype, GLsizei count, const GLuint *indices);
        void  (*get_uniform_subroutineuiv)(GLMContext ctx, GLenum shadertype, GLint location, GLuint *params);
        void  (*get_program_stageiv)(GLMContext ctx, GLuint program, GLenum shadertype, GLenum pname, GLint *values);
        void  (*patch_parameteri)(GLMContext ctx, GLenum pname, GLint value);
        void  (*patch_parameterfv)(GLMContext ctx, GLenum pname, const GLfloat *values);
        void  (*bind_transform_feedback)(GLMContext ctx, GLenum target, GLuint id);
        void  (*delete_transform_feedbacks)(GLMContext ctx, GLsizei n, const GLuint *ids);
        void  (*gen_transform_feedbacks)(GLMContext ctx, GLsizei n, GLuint *ids);
        GLboolean (*is_transform_feedback)(GLMContext ctx, GLuint id);
        void  (*pause_transform_feedback)(GLMContext ctx);
        void  (*resume_transform_feedback)(GLMContext ctx);
        void  (*draw_transform_feedback)(GLMContext ctx, GLenum mode, GLuint id);
        void  (*draw_transform_feedback_stream)(GLMContext ctx, GLenum mode, GLuint id, GLuint stream);
        void  (*begin_query_indexed)(GLMContext ctx, GLenum target, GLuint index, GLuint id);
        void  (*end_query_indexed)(GLMContext ctx, GLenum target, GLuint index);
        void  (*get_query_indexediv)(GLMContext ctx, GLenum target, GLuint index, GLenum pname, GLint *params);
        void  (*release_shader_compiler)(GLMContext ctx);
        void  (*shader_binary)(GLMContext ctx, GLsizei count, const GLuint *shaders, GLenum binaryFormat, const void *binary, GLsizei length);
        void  (*get_shader_precision_format)(GLMContext ctx, GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);
        void  (*depth_rangef)(GLMContext ctx, GLfloat n, GLfloat f);
        void  (*clear_depthf)(GLMContext ctx, GLfloat d);
        void  (*get_program_binary)(GLMContext ctx, GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary);
        void  (*program_binary)(GLMContext ctx, GLuint program, GLenum binaryFormat, const void *binary, GLsizei length);
        void  (*program_parameteri)(GLMContext ctx, GLuint program, GLenum pname, GLint value);
        void  (*use_program_stages)(GLMContext ctx, GLuint pipeline, GLbitfield stages, GLuint program);
        void  (*active_shader_program)(GLMContext ctx, GLuint pipeline, GLuint program);
        GLuint (*create_shader_programv)(GLMContext ctx, GLenum type, GLsizei count, const GLchar *const*strings);
        void  (*bind_program_pipeline)(GLMContext ctx, GLuint pipeline);
        void  (*delete_program_pipelines)(GLMContext ctx, GLsizei n, const GLuint *pipelines);
        void  (*gen_program_pipelines)(GLMContext ctx, GLsizei n, GLuint *pipelines);
        GLboolean (*is_program_pipeline)(GLMContext ctx, GLuint pipeline);
        void  (*get_program_pipelineiv)(GLMContext ctx, GLuint pipeline, GLenum pname, GLint *params);
        void  (*program_uniform1i)(GLMContext ctx, GLuint program, GLint location, GLint v0);
        void  (*program_uniform1iv)(GLMContext ctx, GLuint program, GLint location, GLsizei count, const GLint *value);
        void  (*program_uniform1f)(GLMContext ctx, GLuint program, GLint location, GLfloat v0);
        void  (*program_uniform1fv)(GLMContext ctx, GLuint program, GLint location, GLsizei count, const GLfloat *value);
        void  (*program_uniform1d)(GLMContext ctx, GLuint program, GLint location, GLdouble v0);
        void  (*program_uniform1dv)(GLMContext ctx, GLuint program, GLint location, GLsizei count, const GLdouble *value);
        void  (*program_uniform1ui)(GLMContext ctx, GLuint program, GLint location, GLuint v0);
        void  (*program_uniform1uiv)(GLMContext ctx, GLuint program, GLint location, GLsizei count, const GLuint *value);
        void  (*program_uniform2i)(GLMContext ctx, GLuint program, GLint location, GLint v0, GLint v1);
        void  (*program_uniform2iv)(GLMContext ctx, GLuint program, GLint location, GLsizei count, const GLint *value);
        void  (*program_uniform2f)(GLMContext ctx, GLuint program, GLint location, GLfloat v0, GLfloat v1);
        void  (*program_uniform2fv)(GLMContext ctx, GLuint program, GLint location, GLsizei count, const GLfloat *value);
        void  (*program_uniform2d)(GLMContext ctx, GLuint program, GLint location, GLdouble v0, GLdouble v1);
        void  (*program_uniform2dv)(GLMContext ctx, GLuint program, GLint location, GLsizei count, const GLdouble *value);
        void  (*program_uniform2ui)(GLMContext ctx, GLuint program, GLint location, GLuint v0, GLuint v1);
        void  (*program_uniform2uiv)(GLMContext ctx, GLuint program, GLint location, GLsizei count, const GLuint *value);
        void  (*program_uniform3i)(GLMContext ctx, GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
        void  (*program_uniform3iv)(GLMContext ctx, GLuint program, GLint location, GLsizei count, const GLint *value);
        void  (*program_uniform3f)(GLMContext ctx, GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
        void  (*program_uniform3fv)(GLMContext ctx, GLuint program, GLint location, GLsizei count, const GLfloat *value);
        void  (*program_uniform3d)(GLMContext ctx, GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
        void  (*program_uniform3dv)(GLMContext ctx, GLuint program, GLint location, GLsizei count, const GLdouble *value);
        void  (*program_uniform3ui)(GLMContext ctx, GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
        void  (*program_uniform3uiv)(GLMContext ctx, GLuint program, GLint location, GLsizei count, const GLuint *value);
        void  (*program_uniform4i)(GLMContext ctx, GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
        void  (*program_uniform4iv)(GLMContext ctx, GLuint program, GLint location, GLsizei count, const GLint *value);
        void  (*program_uniform4f)(GLMContext ctx, GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
        void  (*program_uniform4fv)(GLMContext ctx, GLuint program, GLint location, GLsizei count, const GLfloat *value);
        void  (*program_uniform4d)(GLMContext ctx, GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
        void  (*program_uniform4dv)(GLMContext ctx, GLuint program, GLint location, GLsizei count, const GLdouble *value);
        void  (*program_uniform4ui)(GLMContext ctx, GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
        void  (*program_uniform4uiv)(GLMContext ctx, GLuint program, GLint location, GLsizei count, const GLuint *value);
        void  (*program_uniform_matrix2fv)(GLMContext ctx, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
        void  (*program_uniform_matrix3fv)(GLMContext ctx, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
        void  (*program_uniform_matrix4fv)(GLMContext ctx, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
        void  (*program_uniform_matrix2dv)(GLMContext ctx, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
        void  (*program_uniform_matrix3dv)(GLMContext ctx, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
        void  (*program_uniform_matrix4dv)(GLMContext ctx, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
        void  (*program_uniform_matrix2x3fv)(GLMContext ctx, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
        void  (*program_uniform_matrix3x2fv)(GLMContext ctx, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
        void  (*program_uniform_matrix2x4fv)(GLMContext ctx, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
        void  (*program_uniform_matrix4x2fv)(GLMContext ctx, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
        void  (*program_uniform_matrix3x4fv)(GLMContext ctx, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
        void  (*program_uniform_matrix4x3fv)(GLMContext ctx, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
        void  (*program_uniform_matrix2x3dv)(GLMContext ctx, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
        void  (*program_uniform_matrix3x2dv)(GLMContext ctx, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
        void  (*program_uniform_matrix2x4dv)(GLMContext ctx, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
        void  (*program_uniform_matrix4x2dv)(GLMContext ctx, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
        void  (*program_uniform_matrix3x4dv)(GLMContext ctx, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
        void  (*program_uniform_matrix4x3dv)(GLMContext ctx, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
        void  (*validate_program_pipeline)(GLMContext ctx, GLuint pipeline);
        void  (*get_program_pipeline_info_log)(GLMContext ctx, GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
        void  (*vertex_attrib_l1d)(GLMContext ctx, GLuint index, GLdouble x);
        void  (*vertex_attrib_l2d)(GLMContext ctx, GLuint index, GLdouble x, GLdouble y);
        void  (*vertex_attrib_l3d)(GLMContext ctx, GLuint index, GLdouble x, GLdouble y, GLdouble z);
        void  (*vertex_attrib_l4d)(GLMContext ctx, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
        void  (*vertex_attrib_l1dv)(GLMContext ctx, GLuint index, const GLdouble *v);
        void  (*vertex_attrib_l2dv)(GLMContext ctx, GLuint index, const GLdouble *v);
        void  (*vertex_attrib_l3dv)(GLMContext ctx, GLuint index, const GLdouble *v);
        void  (*vertex_attrib_l4dv)(GLMContext ctx, GLuint index, const GLdouble *v);
        void  (*vertex_attrib_l_pointer)(GLMContext ctx, GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
        void  (*get_vertex_attrib_ldv)(GLMContext ctx, GLuint index, GLenum pname, GLdouble *params);
        void  (*viewport_arrayv)(GLMContext ctx, GLuint first, GLsizei count, const GLfloat *v);
        void  (*viewport_indexedf)(GLMContext ctx, GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
        void  (*viewport_indexedfv)(GLMContext ctx, GLuint index, const GLfloat *v);
        void  (*scissor_arrayv)(GLMContext ctx, GLuint first, GLsizei count, const GLint *v);
        void  (*scissor_indexed)(GLMContext ctx, GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
        void  (*scissor_indexedv)(GLMContext ctx, GLuint index, const GLint *v);
        void  (*depth_range_arrayv)(GLMContext ctx, GLuint first, GLsizei count, const GLdouble *v);
        void  (*depth_range_indexed)(GLMContext ctx, GLuint index, GLdouble n, GLdouble f);
        void  (*get_floati_v)(GLMContext ctx, GLenum target, GLuint index, GLfloat *data);
        void  (*get_doublei_v)(GLMContext ctx, GLenum target, GLuint index, GLdouble *data);
        void  (*draw_arrays_instanced_base_instance)(GLMContext ctx, GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);
        void  (*draw_elements_instanced_base_instance)(GLMContext ctx, GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance);
        void  (*draw_elements_instanced_base_vertex_base_instance)(GLMContext ctx, GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);
        void  (*get_internalformativ)(GLMContext ctx, GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint *params);
        void  (*get_active_atomic_counter_bufferiv)(GLMContext ctx, GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
        void  (*bind_image_texture)(GLMContext ctx, GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
        void  (*memory_barrier)(GLMContext ctx, GLbitfield barriers);
        void  (*tex_storage1D)(GLMContext ctx, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
        void  (*tex_storage2D)(GLMContext ctx, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
        void  (*tex_storage3D)(GLMContext ctx, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
        void  (*draw_transform_feedback_instanced)(GLMContext ctx, GLenum mode, GLuint id, GLsizei instancecount);
        void  (*draw_transform_feedback_stream_instanced)(GLMContext ctx, GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);
        void  (*clear_buffer_data)(GLMContext ctx, GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data);
        void  (*clear_buffer_sub_data)(GLMContext ctx, GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
        void  (*dispatch_compute)(GLMContext ctx, GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
        void  (*dispatch_compute_indirect)(GLMContext ctx, GLintptr indirect);
        void  (*copy_image_sub_data)(GLMContext ctx, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
        void  (*framebuffer_parameteri)(GLMContext ctx, GLenum target, GLenum pname, GLint param);
        void  (*get_framebuffer_parameteriv)(GLMContext ctx, GLenum target, GLenum pname, GLint *params);
        void  (*get_internalformati64v)(GLMContext ctx, GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint64 *params);
        void  (*invalidate_tex_sub_image)(GLMContext ctx, GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
        void  (*invalidate_tex_image)(GLMContext ctx, GLuint texture, GLint level);
        void  (*invalidate_buffer_sub_data)(GLMContext ctx, GLuint buffer, GLintptr offset, GLsizeiptr length);
        void  (*invalidate_buffer_data)(GLMContext ctx, GLuint buffer);
        void  (*invalidate_framebuffer)(GLMContext ctx, GLenum target, GLsizei numAttachments, const GLenum *attachments);
        void  (*invalidate_sub_framebuffer)(GLMContext ctx, GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
        void  (*multi_draw_arrays_indirect)(GLMContext ctx, GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride);
        void  (*multi_draw_elements_indirect)(GLMContext ctx, GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride);
        void  (*get_program_interfaceiv)(GLMContext ctx, GLuint program, GLenum programInterface, GLenum pname, GLint *params);
        GLuint (*get_program_resource_index)(GLMContext ctx, GLuint program, GLenum programInterface, const GLchar *name);
        void  (*get_program_resource_name)(GLMContext ctx, GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
        void  (*get_program_resourceiv)(GLMContext ctx, GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei count, GLsizei *length, GLint *params);
        GLint (*get_program_resource_location)(GLMContext ctx, GLuint program, GLenum programInterface, const GLchar *name);
        GLint (*get_program_resource_location_index)(GLMContext ctx, GLuint program, GLenum programInterface, const GLchar *name);
        void  (*shader_storage_block_binding)(GLMContext ctx, GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);
        void  (*tex_buffer_range)(GLMContext ctx, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
        void  (*tex_storage2_d_multisample)(GLMContext ctx, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
        void  (*tex_storage3_d_multisample)(GLMContext ctx, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
        void  (*texture_view)(GLMContext ctx, GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
        void  (*bind_vertex_buffer)(GLMContext ctx, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
        void  (*vertex_attrib_format)(GLMContext ctx, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
        void  (*vertex_attrib_i_format)(GLMContext ctx, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
        void  (*vertex_attrib_l_format)(GLMContext ctx, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
        void  (*vertex_attrib_binding)(GLMContext ctx, GLuint attribindex, GLuint bindingindex);
        void  (*vertex_binding_divisor)(GLMContext ctx, GLuint bindingindex, GLuint divisor);
        void  (*debug_message_control)(GLMContext ctx, GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
        void  (*debug_message_insert)(GLMContext ctx, GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
        void  (*debug_message_callback)(GLMContext ctx, GLDEBUGPROC callback, const void *userParam);
        GLuint (*get_debug_message_log)(GLMContext ctx, GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
        void  (*push_debug_group)(GLMContext ctx, GLenum source, GLuint id, GLsizei length, const GLchar *message);
        void  (*pop_debug_group)(GLMContext ctx);
        void  (*object_label)(GLMContext ctx, GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
        void  (*get_object_label)(GLMContext ctx, GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
        void  (*object_ptr_label)(GLMContext ctx, const void *ptr, GLsizei length, const GLchar *label);
        void  (*get_object_ptr_label)(GLMContext ctx, const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
        void  (*buffer_storage)(GLMContext ctx, GLenum target, GLsizeiptr size, const void *data, GLbitfield flags);
        void  (*clear_tex_image)(GLMContext ctx, GLuint texture, GLint level, GLenum format, GLenum type, const void *data);
        void  (*clear_tex_sub_image)(GLMContext ctx, GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data);
        void  (*bind_buffers_base)(GLMContext ctx, GLenum target, GLuint first, GLsizei count, const GLuint *buffers);
        void  (*bind_buffers_range)(GLMContext ctx, GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes);
        void  (*bind_textures)(GLMContext ctx, GLuint first, GLsizei count, const GLuint *textures);
        void  (*bind_samplers)(GLMContext ctx, GLuint first, GLsizei count, const GLuint *samplers);
        void  (*bind_image_textures)(GLMContext ctx, GLuint first, GLsizei count, const GLuint *textures);
        void  (*bind_vertex_buffers)(GLMContext ctx, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);
        void  (*clip_control)(GLMContext ctx, GLenum origin, GLenum depth);
        void  (*create_transform_feedbacks)(GLMContext ctx, GLsizei n, GLuint *ids);
        void  (*transform_feedback_buffer_base)(GLMContext ctx, GLuint xfb, GLuint index, GLuint buffer);
        void  (*transform_feedback_buffer_range)(GLMContext ctx, GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
        void  (*get_transform_feedbackiv)(GLMContext ctx, GLuint xfb, GLenum pname, GLint *param);
        void  (*get_transform_feedbacki_v)(GLMContext ctx, GLuint xfb, GLenum pname, GLuint index, GLint *param);
        void  (*get_transform_feedbacki64_v)(GLMContext ctx, GLuint xfb, GLenum pname, GLuint index, GLint64 *param);
        void  (*create_buffers)(GLMContext ctx, GLsizei n, GLuint *buffers);
        void  (*named_buffer_storage)(GLMContext ctx, GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags);
        void  (*named_buffer_data)(GLMContext ctx, GLuint buffer, GLsizeiptr size, const void *data, GLenum usage);
        void  (*named_buffer_sub_data)(GLMContext ctx, GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data);
        void  (*copy_named_buffer_sub_data)(GLMContext ctx, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
        void  (*clear_named_buffer_data)(GLMContext ctx, GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data);
        void  (*clear_named_buffer_sub_data)(GLMContext ctx, GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
        void * (*map_named_buffer)(GLMContext ctx, GLuint buffer, GLenum access);
        void * (*map_named_buffer_range)(GLMContext ctx, GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
        GLboolean (*unmap_named_buffer)(GLMContext ctx, GLuint buffer);
        void  (*flush_mapped_named_buffer_range)(GLMContext ctx, GLuint buffer, GLintptr offset, GLsizeiptr length);
        void  (*get_named_buffer_parameteriv)(GLMContext ctx, GLuint buffer, GLenum pname, GLint *params);
        void  (*get_named_buffer_parameteri64v)(GLMContext ctx, GLuint buffer, GLenum pname, GLint64 *params);
        void  (*get_named_buffer_pointerv)(GLMContext ctx, GLuint buffer, GLenum pname, void **params);
        void  (*get_named_buffer_sub_data)(GLMContext ctx, GLuint buffer, GLintptr offset, GLsizeiptr size, void *data);
        void  (*create_framebuffers)(GLMContext ctx, GLsizei n, GLuint *framebuffers);
        void  (*named_framebuffer_renderbuffer)(GLMContext ctx, GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
        void  (*named_framebuffer_parameteri)(GLMContext ctx, GLuint framebuffer, GLenum pname, GLint param);
        void  (*named_framebuffer_texture)(GLMContext ctx, GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
        void  (*named_framebuffer_texture_layer)(GLMContext ctx, GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
        void  (*named_framebuffer_draw_buffer)(GLMContext ctx, GLuint framebuffer, GLenum buf);
        void  (*named_framebuffer_draw_buffers)(GLMContext ctx, GLuint framebuffer, GLsizei n, const GLenum *bufs);
        void  (*named_framebuffer_read_buffer)(GLMContext ctx, GLuint framebuffer, GLenum src);
        void  (*invalidate_named_framebuffer_data)(GLMContext ctx, GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments);
        void  (*invalidate_named_framebuffer_sub_data)(GLMContext ctx, GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
        void  (*clear_named_framebufferiv)(GLMContext ctx, GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value);
        void  (*clear_named_framebufferuiv)(GLMContext ctx, GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value);
        void  (*clear_named_framebufferfv)(GLMContext ctx, GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value);
        void  (*clear_named_framebufferfi)(GLMContext ctx, GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
        void  (*blit_named_framebuffer)(GLMContext ctx, GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
        GLenum (*check_named_framebuffer_status)(GLMContext ctx, GLuint framebuffer, GLenum target);
        void  (*get_named_framebuffer_parameteriv)(GLMContext ctx, GLuint framebuffer, GLenum pname, GLint *param);
        void  (*get_named_framebuffer_attachment_parameteriv)(GLMContext ctx, GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params);
        void  (*create_renderbuffers)(GLMContext ctx, GLsizei n, GLuint *renderbuffers);
        void  (*named_renderbuffer_storage)(GLMContext ctx, GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
        void  (*named_renderbuffer_storage_multisample)(GLMContext ctx, GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
        void  (*get_named_renderbuffer_parameteriv)(GLMContext ctx, GLuint renderbuffer, GLenum pname, GLint *params);
        void  (*create_textures)(GLMContext ctx, GLenum target, GLsizei n, GLuint *textures);
        void  (*texture_buffer)(GLMContext ctx, GLuint texture, GLenum internalformat, GLuint buffer);
        void  (*texture_buffer_range)(GLMContext ctx, GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
        void  (*texture_storage1D)(GLMContext ctx, GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width);
        void  (*texture_storage2D)(GLMContext ctx, GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
        void  (*texture_storage3D)(GLMContext ctx, GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
        void  (*texture_storage2_d_multisample)(GLMContext ctx, GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
        void  (*texture_storage3_d_multisample)(GLMContext ctx, GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
        void  (*texture_sub_image1D)(GLMContext ctx, GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
        void  (*texture_sub_image2D)(GLMContext ctx, GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
        void  (*texture_sub_image3D)(GLMContext ctx, GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
        void  (*compressed_texture_sub_image1D)(GLMContext ctx, GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
        void  (*compressed_texture_sub_image2D)(GLMContext ctx, GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
        void  (*compressed_texture_sub_image3D)(GLMContext ctx, GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
        void  (*copy_texture_sub_image1D)(GLMContext ctx, GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
        void  (*copy_texture_sub_image2D)(GLMContext ctx, GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
        void  (*copy_texture_sub_image3D)(GLMContext ctx, GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
        void  (*texture_parameterf)(GLMContext ctx, GLuint texture, GLenum pname, GLfloat param);
        void  (*texture_parameterfv)(GLMContext ctx, GLuint texture, GLenum pname, const GLfloat *param);
        void  (*texture_parameteri)(GLMContext ctx, GLuint texture, GLenum pname, GLint param);
        void  (*texture_parameter_iiv)(GLMContext ctx, GLuint texture, GLenum pname, const GLint *params);
        void  (*texture_parameter_iuiv)(GLMContext ctx, GLuint texture, GLenum pname, const GLuint *params);
        void  (*texture_parameteriv)(GLMContext ctx, GLuint texture, GLenum pname, const GLint *param);
        void  (*generate_texture_mipmap)(GLMContext ctx, GLuint texture);
        void  (*bind_texture_unit)(GLMContext ctx, GLuint unit, GLuint texture);
        void  (*get_texture_image)(GLMContext ctx, GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
        void  (*get_compressed_texture_image)(GLMContext ctx, GLuint texture, GLint level, GLsizei bufSize, void *pixels);
        void  (*get_texture_level_parameterfv)(GLMContext ctx, GLuint texture, GLint level, GLenum pname, GLfloat *params);
        void  (*get_texture_level_parameteriv)(GLMContext ctx, GLuint texture, GLint level, GLenum pname, GLint *params);
        void  (*get_texture_parameterfv)(GLMContext ctx, GLuint texture, GLenum pname, GLfloat *params);
        void  (*get_texture_parameter_iiv)(GLMContext ctx, GLuint texture, GLenum pname, GLint *params);
        void  (*get_texture_parameter_iuiv)(GLMContext ctx, GLuint texture, GLenum pname, GLuint *params);
        void  (*get_texture_parameteriv)(GLMContext ctx, GLuint texture, GLenum pname, GLint *params);
        void  (*create_vertex_arrays)(GLMContext ctx, GLsizei n, GLuint *arrays);
        void  (*disable_vertex_array_attrib)(GLMContext ctx, GLuint vaobj, GLuint index);
        void  (*enable_vertex_array_attrib)(GLMContext ctx, GLuint vaobj, GLuint index);
        void  (*vertex_array_element_buffer)(GLMContext ctx, GLuint vaobj, GLuint buffer);
        void  (*vertex_array_vertex_buffer)(GLMContext ctx, GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
        void  (*vertex_array_vertex_buffers)(GLMContext ctx, GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);
        void  (*vertex_array_attrib_binding)(GLMContext ctx, GLuint vaobj, GLuint attribindex, GLuint bindingindex);
        void  (*vertex_array_attrib_format)(GLMContext ctx, GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
        void  (*vertex_array_attrib_i_format)(GLMContext ctx, GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
        void  (*vertex_array_attrib_l_format)(GLMContext ctx, GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
        void  (*vertex_array_binding_divisor)(GLMContext ctx, GLuint vaobj, GLuint bindingindex, GLuint divisor);
        void  (*get_vertex_arrayiv)(GLMContext ctx, GLuint vaobj, GLenum pname, GLint *param);
        void  (*get_vertex_array_indexediv)(GLMContext ctx, GLuint vaobj, GLuint index, GLenum pname, GLint *param);
        void  (*get_vertex_array_indexed64iv)(GLMContext ctx, GLuint vaobj, GLuint index, GLenum pname, GLint64 *param);
        void  (*create_samplers)(GLMContext ctx, GLsizei n, GLuint *samplers);
        void  (*create_program_pipelines)(GLMContext ctx, GLsizei n, GLuint *pipelines);
        void  (*create_queries)(GLMContext ctx, GLenum target, GLsizei n, GLuint *ids);
        void  (*get_query_buffer_objecti64v)(GLMContext ctx, GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
        void  (*get_query_buffer_objectiv)(GLMContext ctx, GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
        void  (*get_query_buffer_objectui64v)(GLMContext ctx, GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
        void  (*get_query_buffer_objectuiv)(GLMContext ctx, GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
        void  (*memory_barrier_by_region)(GLMContext ctx, GLbitfield barriers);
        void  (*get_texture_sub_image)(GLMContext ctx, GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
        void  (*get_compressed_texture_sub_image)(GLMContext ctx, GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels);
        GLenum (*get_graphics_reset_status)(GLMContext ctx);
        void  (*getn_compressed_tex_image)(GLMContext ctx, GLenum target, GLint lod, GLsizei bufSize, void *pixels);
        void  (*getn_tex_image)(GLMContext ctx, GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
        void  (*getn_uniformdv)(GLMContext ctx, GLuint program, GLint location, GLsizei bufSize, GLdouble *params);
        void  (*getn_uniformfv)(GLMContext ctx, GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
        void  (*getn_uniformiv)(GLMContext ctx, GLuint program, GLint location, GLsizei bufSize, GLint *params);
        void  (*getn_uniformuiv)(GLMContext ctx, GLuint program, GLint location, GLsizei bufSize, GLuint *params);
        void  (*readn_pixels)(GLMContext ctx, GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);
        void  (*getn_mapdv)(GLMContext ctx, GLenum target, GLenum query, GLsizei bufSize, GLdouble *v);
        void  (*getn_mapfv)(GLMContext ctx, GLenum target, GLenum query, GLsizei bufSize, GLfloat *v);
        void  (*getn_mapiv)(GLMContext ctx, GLenum target, GLenum query, GLsizei bufSize, GLint *v);
        void  (*getn_pixel_mapfv)(GLMContext ctx, GLenum map, GLsizei bufSize, GLfloat *values);
        void  (*getn_pixel_mapuiv)(GLMContext ctx, GLenum map, GLsizei bufSize, GLuint *values);
        void  (*getn_pixel_mapusv)(GLMContext ctx, GLenum map, GLsizei bufSize, GLushort *values);
        void  (*getn_polygon_stipple)(GLMContext ctx, GLsizei bufSize, GLubyte *pattern);
        void  (*getn_color_table)(GLMContext ctx, GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table);
        void  (*getn_convolution_filter)(GLMContext ctx, GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image);
        void  (*getn_separable_filter)(GLMContext ctx, GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span);
        void  (*getn_histogram)(GLMContext ctx, GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values);
        void  (*getn_minmax)(GLMContext ctx, GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values);
        void  (*texture_barrier)(GLMContext ctx);
        void  (*specialize_shader)(GLMContext ctx, GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue);
        void  (*multi_draw_arrays_indirect_count)(GLMContext ctx, GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
        void  (*multi_draw_elements_indirect_count)(GLMContext ctx, GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
        void  (*polygon_offset_clamp)(GLMContext ctx, GLfloat factor, GLfloat units, GLfloat clamp);
};

