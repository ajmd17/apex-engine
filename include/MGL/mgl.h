//
// /tmp/mgl.h
//
// Autogenerated from gl.xml
//
// Mike Larson
//
// October 2021
//

#pragma once

#ifndef mgl_h
#define mgl_h

#include <stdio.h>
#include <stdlib.h>
#include <strings.h>
#include <assert.h>

#include "gltypes.h"
#include "glcorearb.h"
#include "glm_context.h"

void mglCullFace(GLMContext ctx, GLenum mode);
void mglFrontFace(GLMContext ctx, GLenum mode);
void mglHint(GLMContext ctx, GLenum target, GLenum mode);
void mglLineWidth(GLMContext ctx, GLfloat width);
void mglPointSize(GLMContext ctx, GLfloat size);
void mglPolygonMode(GLMContext ctx, GLenum face, GLenum mode);
void mglScissor(GLMContext ctx, GLint x, GLint y, GLsizei width, GLsizei height);
void mglTexParameterf(GLMContext ctx, GLenum target, GLenum pname, GLfloat param);
void mglTexParameterfv(GLMContext ctx, GLenum target, GLenum pname, const GLfloat *params);
void mglTexParameteri(GLMContext ctx, GLenum target, GLenum pname, GLint param);
void mglTexParameteriv(GLMContext ctx, GLenum target, GLenum pname, const GLint *params);
void mglTexImage1D(GLMContext ctx, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);
void mglTexImage2D(GLMContext ctx, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
void mglDrawBuffer(GLMContext ctx, GLenum buf);
void mglClear(GLMContext ctx, GLbitfield mask);
void mglClearColor(GLMContext ctx, GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
void mglClearStencil(GLMContext ctx, GLint s);
void mglClearDepth(GLMContext ctx, GLdouble depth);
void mglStencilMask(GLMContext ctx, GLuint mask);
void mglColorMask(GLMContext ctx, GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
void mglDepthMask(GLMContext ctx, GLboolean flag);
void mglDisable(GLMContext ctx, GLenum cap);
void mglEnable(GLMContext ctx, GLenum cap);
void mglFinish(GLMContext ctx);
void mglFlush(GLMContext ctx);
void mglBlendFunc(GLMContext ctx, GLenum sfactor, GLenum dfactor);
void mglLogicOp(GLMContext ctx, GLenum opcode);
void mglStencilFunc(GLMContext ctx, GLenum func, GLint ref, GLuint mask);
void mglStencilOp(GLMContext ctx, GLenum fail, GLenum zfail, GLenum zpass);
void mglDepthFunc(GLMContext ctx, GLenum func);
void mglPixelStoref(GLMContext ctx, GLenum pname, GLfloat param);
void mglPixelStorei(GLMContext ctx, GLenum pname, GLint param);
void mglReadBuffer(GLMContext ctx, GLenum src);
void mglReadPixels(GLMContext ctx, GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels);
void mglGetBooleanv(GLMContext ctx, GLenum pname, GLboolean *data);
void mglGetDoublev(GLMContext ctx, GLenum pname, GLdouble *data);
GLenum  mglGetError(GLMContext ctx);
void mglGetFloatv(GLMContext ctx, GLenum pname, GLfloat *data);
void mglGetIntegerv(GLMContext ctx, GLenum pname, GLint *data);
const GLubyte  *mglGetString(GLMContext ctx, GLenum name);
void mglGetTexImage(GLMContext ctx, GLenum target, GLint level, GLenum format, GLenum type, void *pixels);
void mglGetTexParameterfv(GLMContext ctx, GLenum target, GLenum pname, GLfloat *params);
void mglGetTexParameteriv(GLMContext ctx, GLenum target, GLenum pname, GLint *params);
void mglGetTexLevelParameterfv(GLMContext ctx, GLenum target, GLint level, GLenum pname, GLfloat *params);
void mglGetTexLevelParameteriv(GLMContext ctx, GLenum target, GLint level, GLenum pname, GLint *params);
GLboolean mglIsEnabled(GLMContext ctx, GLenum cap);
void mglDepthRange(GLMContext ctx, GLdouble n, GLdouble f);
void mglViewport(GLMContext ctx, GLint x, GLint y, GLsizei width, GLsizei height);
void mglNewList(GLMContext ctx, GLuint list, GLenum mode);
void mglEndList(GLMContext ctx);
void mglCallList(GLMContext ctx, GLuint list);
void mglCallLists(GLMContext ctx, GLsizei n, GLenum type, const void *lists);
void mglDeleteLists(GLMContext ctx, GLuint list, GLsizei range);
GLuint  mglGenLists(GLMContext ctx, GLsizei range);
void mglListBase(GLMContext ctx, GLuint base);
void mglBegin(GLMContext ctx, GLenum mode);
void mglBitmap(GLMContext ctx, GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap);
void mglColor3b(GLMContext ctx, GLbyte red, GLbyte green, GLbyte blue);
void mglColor3bv(GLMContext ctx, const GLbyte *v);
void mglColor3d(GLMContext ctx, GLdouble red, GLdouble green, GLdouble blue);
void mglColor3dv(GLMContext ctx, const GLdouble *v);
void mglColor3f(GLMContext ctx, GLfloat red, GLfloat green, GLfloat blue);
void mglColor3fv(GLMContext ctx, const GLfloat *v);
void mglColor3i(GLMContext ctx, GLint red, GLint green, GLint blue);
void mglColor3iv(GLMContext ctx, const GLint *v);
void mglColor3s(GLMContext ctx, GLshort red, GLshort green, GLshort blue);
void mglColor3sv(GLMContext ctx, const GLshort *v);
void mglColor3ub(GLMContext ctx, GLubyte red, GLubyte green, GLubyte blue);
void mglColor3ubv(GLMContext ctx, const GLubyte *v);
void mglColor3ui(GLMContext ctx, GLuint red, GLuint green, GLuint blue);
void mglColor3uiv(GLMContext ctx, const GLuint *v);
void mglColor3us(GLMContext ctx, GLushort red, GLushort green, GLushort blue);
void mglColor3usv(GLMContext ctx, const GLushort *v);
void mglColor4b(GLMContext ctx, GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
void mglColor4bv(GLMContext ctx, const GLbyte *v);
void mglColor4d(GLMContext ctx, GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
void mglColor4dv(GLMContext ctx, const GLdouble *v);
void mglColor4f(GLMContext ctx, GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
void mglColor4fv(GLMContext ctx, const GLfloat *v);
void mglColor4i(GLMContext ctx, GLint red, GLint green, GLint blue, GLint alpha);
void mglColor4iv(GLMContext ctx, const GLint *v);
void mglColor4s(GLMContext ctx, GLshort red, GLshort green, GLshort blue, GLshort alpha);
void mglColor4sv(GLMContext ctx, const GLshort *v);
void mglColor4ub(GLMContext ctx, GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
void mglColor4ubv(GLMContext ctx, const GLubyte *v);
void mglColor4ui(GLMContext ctx, GLuint red, GLuint green, GLuint blue, GLuint alpha);
void mglColor4uiv(GLMContext ctx, const GLuint *v);
void mglColor4us(GLMContext ctx, GLushort red, GLushort green, GLushort blue, GLushort alpha);
void mglColor4usv(GLMContext ctx, const GLushort *v);
void mglEdgeFlag(GLMContext ctx, GLboolean flag);
void mglEdgeFlagv(GLMContext ctx, const GLboolean *flag);
void mglEnd(GLMContext ctx);
void mglIndexd(GLMContext ctx, GLdouble c);
void mglIndexdv(GLMContext ctx, const GLdouble *c);
void mglIndexf(GLMContext ctx, GLfloat c);
void mglIndexfv(GLMContext ctx, const GLfloat *c);
void mglIndexi(GLMContext ctx, GLint c);
void mglIndexiv(GLMContext ctx, const GLint *c);
void mglIndexs(GLMContext ctx, GLshort c);
void mglIndexsv(GLMContext ctx, const GLshort *c);
void mglNormal3b(GLMContext ctx, GLbyte nx, GLbyte ny, GLbyte nz);
void mglNormal3bv(GLMContext ctx, const GLbyte *v);
void mglNormal3d(GLMContext ctx, GLdouble nx, GLdouble ny, GLdouble nz);
void mglNormal3dv(GLMContext ctx, const GLdouble *v);
void mglNormal3f(GLMContext ctx, GLfloat nx, GLfloat ny, GLfloat nz);
void mglNormal3fv(GLMContext ctx, const GLfloat *v);
void mglNormal3i(GLMContext ctx, GLint nx, GLint ny, GLint nz);
void mglNormal3iv(GLMContext ctx, const GLint *v);
void mglNormal3s(GLMContext ctx, GLshort nx, GLshort ny, GLshort nz);
void mglNormal3sv(GLMContext ctx, const GLshort *v);
void mglRasterPos2d(GLMContext ctx, GLdouble x, GLdouble y);
void mglRasterPos2dv(GLMContext ctx, const GLdouble *v);
void mglRasterPos2f(GLMContext ctx, GLfloat x, GLfloat y);
void mglRasterPos2fv(GLMContext ctx, const GLfloat *v);
void mglRasterPos2i(GLMContext ctx, GLint x, GLint y);
void mglRasterPos2iv(GLMContext ctx, const GLint *v);
void mglRasterPos2s(GLMContext ctx, GLshort x, GLshort y);
void mglRasterPos2sv(GLMContext ctx, const GLshort *v);
void mglRasterPos3d(GLMContext ctx, GLdouble x, GLdouble y, GLdouble z);
void mglRasterPos3dv(GLMContext ctx, const GLdouble *v);
void mglRasterPos3f(GLMContext ctx, GLfloat x, GLfloat y, GLfloat z);
void mglRasterPos3fv(GLMContext ctx, const GLfloat *v);
void mglRasterPos3i(GLMContext ctx, GLint x, GLint y, GLint z);
void mglRasterPos3iv(GLMContext ctx, const GLint *v);
void mglRasterPos3s(GLMContext ctx, GLshort x, GLshort y, GLshort z);
void mglRasterPos3sv(GLMContext ctx, const GLshort *v);
void mglRasterPos4d(GLMContext ctx, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void mglRasterPos4dv(GLMContext ctx, const GLdouble *v);
void mglRasterPos4f(GLMContext ctx, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void mglRasterPos4fv(GLMContext ctx, const GLfloat *v);
void mglRasterPos4i(GLMContext ctx, GLint x, GLint y, GLint z, GLint w);
void mglRasterPos4iv(GLMContext ctx, const GLint *v);
void mglRasterPos4s(GLMContext ctx, GLshort x, GLshort y, GLshort z, GLshort w);
void mglRasterPos4sv(GLMContext ctx, const GLshort *v);
void mglRectd(GLMContext ctx, GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
void mglRectdv(GLMContext ctx, const GLdouble *v1, const GLdouble *v2);
void mglRectf(GLMContext ctx, GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
void mglRectfv(GLMContext ctx, const GLfloat *v1, const GLfloat *v2);
void mglRecti(GLMContext ctx, GLint x1, GLint y1, GLint x2, GLint y2);
void mglRectiv(GLMContext ctx, const GLint *v1, const GLint *v2);
void mglRects(GLMContext ctx, GLshort x1, GLshort y1, GLshort x2, GLshort y2);
void mglRectsv(GLMContext ctx, const GLshort *v1, const GLshort *v2);
void mglTexCoord1d(GLMContext ctx, GLdouble s);
void mglTexCoord1dv(GLMContext ctx, const GLdouble *v);
void mglTexCoord1f(GLMContext ctx, GLfloat s);
void mglTexCoord1fv(GLMContext ctx, const GLfloat *v);
void mglTexCoord1i(GLMContext ctx, GLint s);
void mglTexCoord1iv(GLMContext ctx, const GLint *v);
void mglTexCoord1s(GLMContext ctx, GLshort s);
void mglTexCoord1sv(GLMContext ctx, const GLshort *v);
void mglTexCoord2d(GLMContext ctx, GLdouble s, GLdouble t);
void mglTexCoord2dv(GLMContext ctx, const GLdouble *v);
void mglTexCoord2f(GLMContext ctx, GLfloat s, GLfloat t);
void mglTexCoord2fv(GLMContext ctx, const GLfloat *v);
void mglTexCoord2i(GLMContext ctx, GLint s, GLint t);
void mglTexCoord2iv(GLMContext ctx, const GLint *v);
void mglTexCoord2s(GLMContext ctx, GLshort s, GLshort t);
void mglTexCoord2sv(GLMContext ctx, const GLshort *v);
void mglTexCoord3d(GLMContext ctx, GLdouble s, GLdouble t, GLdouble r);
void mglTexCoord3dv(GLMContext ctx, const GLdouble *v);
void mglTexCoord3f(GLMContext ctx, GLfloat s, GLfloat t, GLfloat r);
void mglTexCoord3fv(GLMContext ctx, const GLfloat *v);
void mglTexCoord3i(GLMContext ctx, GLint s, GLint t, GLint r);
void mglTexCoord3iv(GLMContext ctx, const GLint *v);
void mglTexCoord3s(GLMContext ctx, GLshort s, GLshort t, GLshort r);
void mglTexCoord3sv(GLMContext ctx, const GLshort *v);
void mglTexCoord4d(GLMContext ctx, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
void mglTexCoord4dv(GLMContext ctx, const GLdouble *v);
void mglTexCoord4f(GLMContext ctx, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
void mglTexCoord4fv(GLMContext ctx, const GLfloat *v);
void mglTexCoord4i(GLMContext ctx, GLint s, GLint t, GLint r, GLint q);
void mglTexCoord4iv(GLMContext ctx, const GLint *v);
void mglTexCoord4s(GLMContext ctx, GLshort s, GLshort t, GLshort r, GLshort q);
void mglTexCoord4sv(GLMContext ctx, const GLshort *v);
void mglVertex2d(GLMContext ctx, GLdouble x, GLdouble y);
void mglVertex2dv(GLMContext ctx, const GLdouble *v);
void mglVertex2f(GLMContext ctx, GLfloat x, GLfloat y);
void mglVertex2fv(GLMContext ctx, const GLfloat *v);
void mglVertex2i(GLMContext ctx, GLint x, GLint y);
void mglVertex2iv(GLMContext ctx, const GLint *v);
void mglVertex2s(GLMContext ctx, GLshort x, GLshort y);
void mglVertex2sv(GLMContext ctx, const GLshort *v);
void mglVertex3d(GLMContext ctx, GLdouble x, GLdouble y, GLdouble z);
void mglVertex3dv(GLMContext ctx, const GLdouble *v);
void mglVertex3f(GLMContext ctx, GLfloat x, GLfloat y, GLfloat z);
void mglVertex3fv(GLMContext ctx, const GLfloat *v);
void mglVertex3i(GLMContext ctx, GLint x, GLint y, GLint z);
void mglVertex3iv(GLMContext ctx, const GLint *v);
void mglVertex3s(GLMContext ctx, GLshort x, GLshort y, GLshort z);
void mglVertex3sv(GLMContext ctx, const GLshort *v);
void mglVertex4d(GLMContext ctx, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void mglVertex4dv(GLMContext ctx, const GLdouble *v);
void mglVertex4f(GLMContext ctx, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void mglVertex4fv(GLMContext ctx, const GLfloat *v);
void mglVertex4i(GLMContext ctx, GLint x, GLint y, GLint z, GLint w);
void mglVertex4iv(GLMContext ctx, const GLint *v);
void mglVertex4s(GLMContext ctx, GLshort x, GLshort y, GLshort z, GLshort w);
void mglVertex4sv(GLMContext ctx, const GLshort *v);
void mglClipPlane(GLMContext ctx, GLenum plane, const GLdouble *equation);
void mglColorMaterial(GLMContext ctx, GLenum face, GLenum mode);
void mglFogf(GLMContext ctx, GLenum pname, GLfloat param);
void mglFogfv(GLMContext ctx, GLenum pname, const GLfloat *params);
void mglFogi(GLMContext ctx, GLenum pname, GLint param);
void mglFogiv(GLMContext ctx, GLenum pname, const GLint *params);
void mglLightf(GLMContext ctx, GLenum light, GLenum pname, GLfloat param);
void mglLightfv(GLMContext ctx, GLenum light, GLenum pname, const GLfloat *params);
void mglLighti(GLMContext ctx, GLenum light, GLenum pname, GLint param);
void mglLightiv(GLMContext ctx, GLenum light, GLenum pname, const GLint *params);
void mglLightModelf(GLMContext ctx, GLenum pname, GLfloat param);
void mglLightModelfv(GLMContext ctx, GLenum pname, const GLfloat *params);
void mglLightModeli(GLMContext ctx, GLenum pname, GLint param);
void mglLightModeliv(GLMContext ctx, GLenum pname, const GLint *params);
void mglLineStipple(GLMContext ctx, GLint factor, GLushort pattern);
void mglMaterialf(GLMContext ctx, GLenum face, GLenum pname, GLfloat param);
void mglMaterialfv(GLMContext ctx, GLenum face, GLenum pname, const GLfloat *params);
void mglMateriali(GLMContext ctx, GLenum face, GLenum pname, GLint param);
void mglMaterialiv(GLMContext ctx, GLenum face, GLenum pname, const GLint *params);
void mglPolygonStipple(GLMContext ctx, const GLubyte *mask);
void mglShadeModel(GLMContext ctx, GLenum mode);
void mglTexEnvf(GLMContext ctx, GLenum target, GLenum pname, GLfloat param);
void mglTexEnvfv(GLMContext ctx, GLenum target, GLenum pname, const GLfloat *params);
void mglTexEnvi(GLMContext ctx, GLenum target, GLenum pname, GLint param);
void mglTexEnviv(GLMContext ctx, GLenum target, GLenum pname, const GLint *params);
void mglTexGend(GLMContext ctx, GLenum coord, GLenum pname, GLdouble param);
void mglTexGendv(GLMContext ctx, GLenum coord, GLenum pname, const GLdouble *params);
void mglTexGenf(GLMContext ctx, GLenum coord, GLenum pname, GLfloat param);
void mglTexGenfv(GLMContext ctx, GLenum coord, GLenum pname, const GLfloat *params);
void mglTexGeni(GLMContext ctx, GLenum coord, GLenum pname, GLint param);
void mglTexGeniv(GLMContext ctx, GLenum coord, GLenum pname, const GLint *params);
void mglFeedbackBuffer(GLMContext ctx, GLsizei size, GLenum type, GLfloat *buffer);
void mglSelectBuffer(GLMContext ctx, GLsizei size, GLuint *buffer);
GLint  mglRenderMode(GLMContext ctx, GLenum mode);
void mglInitNames(GLMContext ctx);
void mglLoadName(GLMContext ctx, GLuint name);
void mglPassThrough(GLMContext ctx, GLfloat token);
void mglPopName(GLMContext ctx);
void mglPushName(GLMContext ctx, GLuint name);
void mglClearAccum(GLMContext ctx, GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
void mglClearIndex(GLMContext ctx, GLfloat c);
void mglIndexMask(GLMContext ctx, GLuint mask);
void mglAccum(GLMContext ctx, GLenum op, GLfloat value);
void mglPopAttrib(GLMContext ctx);
void mglPushAttrib(GLMContext ctx, GLbitfield mask);
void mglMap1d(GLMContext ctx, GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);
void mglMap1f(GLMContext ctx, GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);
void mglMap2d(GLMContext ctx, GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);
void mglMap2f(GLMContext ctx, GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);
void mglMapGrid1d(GLMContext ctx, GLint un, GLdouble u1, GLdouble u2);
void mglMapGrid1f(GLMContext ctx, GLint un, GLfloat u1, GLfloat u2);
void mglMapGrid2d(GLMContext ctx, GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
void mglMapGrid2f(GLMContext ctx, GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
void mglEvalCoord1d(GLMContext ctx, GLdouble u);
void mglEvalCoord1dv(GLMContext ctx, const GLdouble *u);
void mglEvalCoord1f(GLMContext ctx, GLfloat u);
void mglEvalCoord1fv(GLMContext ctx, const GLfloat *u);
void mglEvalCoord2d(GLMContext ctx, GLdouble u, GLdouble v);
void mglEvalCoord2dv(GLMContext ctx, const GLdouble *u);
void mglEvalCoord2f(GLMContext ctx, GLfloat u, GLfloat v);
void mglEvalCoord2fv(GLMContext ctx, const GLfloat *u);
void mglEvalMesh1(GLMContext ctx, GLenum mode, GLint i1, GLint i2);
void mglEvalPoint1(GLMContext ctx, GLint i);
void mglEvalMesh2(GLMContext ctx, GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
void mglEvalPoint2(GLMContext ctx, GLint i, GLint j);
void mglAlphaFunc(GLMContext ctx, GLenum func, GLfloat ref);
void mglPixelZoom(GLMContext ctx, GLfloat xfactor, GLfloat yfactor);
void mglPixelTransferf(GLMContext ctx, GLenum pname, GLfloat param);
void mglPixelTransferi(GLMContext ctx, GLenum pname, GLint param);
void mglPixelMapfv(GLMContext ctx, GLenum map, GLsizei mapsize, const GLfloat *values);
void mglPixelMapuiv(GLMContext ctx, GLenum map, GLsizei mapsize, const GLuint *values);
void mglPixelMapusv(GLMContext ctx, GLenum map, GLsizei mapsize, const GLushort *values);
void mglCopyPixels(GLMContext ctx, GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
void mglDrawPixels(GLMContext ctx, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
void mglGetClipPlane(GLMContext ctx, GLenum plane, GLdouble *equation);
void mglGetLightfv(GLMContext ctx, GLenum light, GLenum pname, GLfloat *params);
void mglGetLightiv(GLMContext ctx, GLenum light, GLenum pname, GLint *params);
void mglGetMapdv(GLMContext ctx, GLenum target, GLenum query, GLdouble *v);
void mglGetMapfv(GLMContext ctx, GLenum target, GLenum query, GLfloat *v);
void mglGetMapiv(GLMContext ctx, GLenum target, GLenum query, GLint *v);
void mglGetMaterialfv(GLMContext ctx, GLenum face, GLenum pname, GLfloat *params);
void mglGetMaterialiv(GLMContext ctx, GLenum face, GLenum pname, GLint *params);
void mglGetPixelMapfv(GLMContext ctx, GLenum map, GLfloat *values);
void mglGetPixelMapuiv(GLMContext ctx, GLenum map, GLuint *values);
void mglGetPixelMapusv(GLMContext ctx, GLenum map, GLushort *values);
void mglGetPolygonStipple(GLMContext ctx, GLubyte *mask);
void mglGetTexEnvfv(GLMContext ctx, GLenum target, GLenum pname, GLfloat *params);
void mglGetTexEnviv(GLMContext ctx, GLenum target, GLenum pname, GLint *params);
void mglGetTexGendv(GLMContext ctx, GLenum coord, GLenum pname, GLdouble *params);
void mglGetTexGenfv(GLMContext ctx, GLenum coord, GLenum pname, GLfloat *params);
void mglGetTexGeniv(GLMContext ctx, GLenum coord, GLenum pname, GLint *params);
GLboolean mglIsList(GLMContext ctx, GLuint list);
void mglFrustum(GLMContext ctx, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
void mglLoadIdentity(GLMContext ctx);
void mglLoadMatrixf(GLMContext ctx, const GLfloat *m);
void mglLoadMatrixd(GLMContext ctx, const GLdouble *m);
void mglMatrixMode(GLMContext ctx, GLenum mode);
void mglMultMatrixf(GLMContext ctx, const GLfloat *m);
void mglMultMatrixd(GLMContext ctx, const GLdouble *m);
void mglOrtho(GLMContext ctx, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
void mglPopMatrix(GLMContext ctx);
void mglPushMatrix(GLMContext ctx);
void mglRotated(GLMContext ctx, GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
void mglRotatef(GLMContext ctx, GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
void mglScaled(GLMContext ctx, GLdouble x, GLdouble y, GLdouble z);
void mglScalef(GLMContext ctx, GLfloat x, GLfloat y, GLfloat z);
void mglTranslated(GLMContext ctx, GLdouble x, GLdouble y, GLdouble z);
void mglTranslatef(GLMContext ctx, GLfloat x, GLfloat y, GLfloat z);
void mglDrawArrays(GLMContext ctx, GLenum mode, GLint first, GLsizei count);
void mglDrawElements(GLMContext ctx, GLenum mode, GLsizei count, GLenum type, const void *indices);
void mglGetPointerv(GLMContext ctx, GLenum pname, void **params);
void mglPolygonOffset(GLMContext ctx, GLfloat factor, GLfloat units);
void mglCopyTexImage1D(GLMContext ctx, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
void mglCopyTexImage2D(GLMContext ctx, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
void mglCopyTexSubImage1D(GLMContext ctx, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
void mglCopyTexSubImage2D(GLMContext ctx, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void mglTexSubImage1D(GLMContext ctx, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
void mglTexSubImage2D(GLMContext ctx, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
void mglBindTexture(GLMContext ctx, GLenum target, GLuint texture);
void mglDeleteTextures(GLMContext ctx, GLsizei n, const GLuint *textures);
void mglGenTextures(GLMContext ctx, GLsizei n, GLuint *textures);
GLboolean mglIsTexture(GLMContext ctx, GLuint texture);
void mglArrayElement(GLMContext ctx, GLint i);
void mglColorPointer(GLMContext ctx, GLint size, GLenum type, GLsizei stride, const void *pointer);
void mglDisableClientState(GLMContext ctx, GLenum array);
void mglEdgeFlagPointer(GLMContext ctx, GLsizei stride, const void *pointer);
void mglEnableClientState(GLMContext ctx, GLenum array);
void mglIndexPointer(GLMContext ctx, GLenum type, GLsizei stride, const void *pointer);
void mglInterleavedArrays(GLMContext ctx, GLenum format, GLsizei stride, const void *pointer);
void mglNormalPointer(GLMContext ctx, GLenum type, GLsizei stride, const void *pointer);
void mglTexCoordPointer(GLMContext ctx, GLint size, GLenum type, GLsizei stride, const void *pointer);
void mglVertexPointer(GLMContext ctx, GLint size, GLenum type, GLsizei stride, const void *pointer);
GLboolean mglAreTexturesResident(GLMContext ctx, GLsizei n, const GLuint *textures, GLboolean *residences);
void mglPrioritizeTextures(GLMContext ctx, GLsizei n, const GLuint *textures, const GLfloat *priorities);
void mglIndexub(GLMContext ctx, GLubyte c);
void mglIndexubv(GLMContext ctx, const GLubyte *c);
void mglPopClientAttrib(GLMContext ctx);
void mglPushClientAttrib(GLMContext ctx, GLbitfield mask);
void mglDrawRangeElements(GLMContext ctx, GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices);
void mglTexImage3D(GLMContext ctx, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
void mglTexSubImage3D(GLMContext ctx, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
void mglCopyTexSubImage3D(GLMContext ctx, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void mglActiveTexture(GLMContext ctx, GLenum texture);
void mglSampleCoverage(GLMContext ctx, GLfloat value, GLboolean invert);
void mglCompressedTexImage3D(GLMContext ctx, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);
void mglCompressedTexImage2D(GLMContext ctx, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data);
void mglCompressedTexImage1D(GLMContext ctx, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data);
void mglCompressedTexSubImage3D(GLMContext ctx, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
void mglCompressedTexSubImage2D(GLMContext ctx, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
void mglCompressedTexSubImage1D(GLMContext ctx, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
void mglGetCompressedTexImage(GLMContext ctx, GLenum target, GLint level, void *img);
void mglClientActiveTexture(GLMContext ctx, GLenum texture);
void mglMultiTexCoord1d(GLMContext ctx, GLenum target, GLdouble s);
void mglMultiTexCoord1dv(GLMContext ctx, GLenum target, const GLdouble *v);
void mglMultiTexCoord1f(GLMContext ctx, GLenum target, GLfloat s);
void mglMultiTexCoord1fv(GLMContext ctx, GLenum target, const GLfloat *v);
void mglMultiTexCoord1i(GLMContext ctx, GLenum target, GLint s);
void mglMultiTexCoord1iv(GLMContext ctx, GLenum target, const GLint *v);
void mglMultiTexCoord1s(GLMContext ctx, GLenum target, GLshort s);
void mglMultiTexCoord1sv(GLMContext ctx, GLenum target, const GLshort *v);
void mglMultiTexCoord2d(GLMContext ctx, GLenum target, GLdouble s, GLdouble t);
void mglMultiTexCoord2dv(GLMContext ctx, GLenum target, const GLdouble *v);
void mglMultiTexCoord2f(GLMContext ctx, GLenum target, GLfloat s, GLfloat t);
void mglMultiTexCoord2fv(GLMContext ctx, GLenum target, const GLfloat *v);
void mglMultiTexCoord2i(GLMContext ctx, GLenum target, GLint s, GLint t);
void mglMultiTexCoord2iv(GLMContext ctx, GLenum target, const GLint *v);
void mglMultiTexCoord2s(GLMContext ctx, GLenum target, GLshort s, GLshort t);
void mglMultiTexCoord2sv(GLMContext ctx, GLenum target, const GLshort *v);
void mglMultiTexCoord3d(GLMContext ctx, GLenum target, GLdouble s, GLdouble t, GLdouble r);
void mglMultiTexCoord3dv(GLMContext ctx, GLenum target, const GLdouble *v);
void mglMultiTexCoord3f(GLMContext ctx, GLenum target, GLfloat s, GLfloat t, GLfloat r);
void mglMultiTexCoord3fv(GLMContext ctx, GLenum target, const GLfloat *v);
void mglMultiTexCoord3i(GLMContext ctx, GLenum target, GLint s, GLint t, GLint r);
void mglMultiTexCoord3iv(GLMContext ctx, GLenum target, const GLint *v);
void mglMultiTexCoord3s(GLMContext ctx, GLenum target, GLshort s, GLshort t, GLshort r);
void mglMultiTexCoord3sv(GLMContext ctx, GLenum target, const GLshort *v);
void mglMultiTexCoord4d(GLMContext ctx, GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
void mglMultiTexCoord4dv(GLMContext ctx, GLenum target, const GLdouble *v);
void mglMultiTexCoord4f(GLMContext ctx, GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
void mglMultiTexCoord4fv(GLMContext ctx, GLenum target, const GLfloat *v);
void mglMultiTexCoord4i(GLMContext ctx, GLenum target, GLint s, GLint t, GLint r, GLint q);
void mglMultiTexCoord4iv(GLMContext ctx, GLenum target, const GLint *v);
void mglMultiTexCoord4s(GLMContext ctx, GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
void mglMultiTexCoord4sv(GLMContext ctx, GLenum target, const GLshort *v);
void mglLoadTransposeMatrixf(GLMContext ctx, const GLfloat *m);
void mglLoadTransposeMatrixd(GLMContext ctx, const GLdouble *m);
void mglMultTransposeMatrixf(GLMContext ctx, const GLfloat *m);
void mglMultTransposeMatrixd(GLMContext ctx, const GLdouble *m);
void mglBlendFuncSeparate(GLMContext ctx, GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
void mglMultiDrawArrays(GLMContext ctx, GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount);
void mglMultiDrawElements(GLMContext ctx, GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount);
void mglPointParameterf(GLMContext ctx, GLenum pname, GLfloat param);
void mglPointParameterfv(GLMContext ctx, GLenum pname, const GLfloat *params);
void mglPointParameteri(GLMContext ctx, GLenum pname, GLint param);
void mglPointParameteriv(GLMContext ctx, GLenum pname, const GLint *params);
void mglFogCoordf(GLMContext ctx, GLfloat coord);
void mglFogCoordfv(GLMContext ctx, const GLfloat *coord);
void mglFogCoordd(GLMContext ctx, GLdouble coord);
void mglFogCoorddv(GLMContext ctx, const GLdouble *coord);
void mglFogCoordPointer(GLMContext ctx, GLenum type, GLsizei stride, const void *pointer);
void mglSecondaryColor3b(GLMContext ctx, GLbyte red, GLbyte green, GLbyte blue);
void mglSecondaryColor3bv(GLMContext ctx, const GLbyte *v);
void mglSecondaryColor3d(GLMContext ctx, GLdouble red, GLdouble green, GLdouble blue);
void mglSecondaryColor3dv(GLMContext ctx, const GLdouble *v);
void mglSecondaryColor3f(GLMContext ctx, GLfloat red, GLfloat green, GLfloat blue);
void mglSecondaryColor3fv(GLMContext ctx, const GLfloat *v);
void mglSecondaryColor3i(GLMContext ctx, GLint red, GLint green, GLint blue);
void mglSecondaryColor3iv(GLMContext ctx, const GLint *v);
void mglSecondaryColor3s(GLMContext ctx, GLshort red, GLshort green, GLshort blue);
void mglSecondaryColor3sv(GLMContext ctx, const GLshort *v);
void mglSecondaryColor3ub(GLMContext ctx, GLubyte red, GLubyte green, GLubyte blue);
void mglSecondaryColor3ubv(GLMContext ctx, const GLubyte *v);
void mglSecondaryColor3ui(GLMContext ctx, GLuint red, GLuint green, GLuint blue);
void mglSecondaryColor3uiv(GLMContext ctx, const GLuint *v);
void mglSecondaryColor3us(GLMContext ctx, GLushort red, GLushort green, GLushort blue);
void mglSecondaryColor3usv(GLMContext ctx, const GLushort *v);
void mglSecondaryColorPointer(GLMContext ctx, GLint size, GLenum type, GLsizei stride, const void *pointer);
void mglWindowPos2d(GLMContext ctx, GLdouble x, GLdouble y);
void mglWindowPos2dv(GLMContext ctx, const GLdouble *v);
void mglWindowPos2f(GLMContext ctx, GLfloat x, GLfloat y);
void mglWindowPos2fv(GLMContext ctx, const GLfloat *v);
void mglWindowPos2i(GLMContext ctx, GLint x, GLint y);
void mglWindowPos2iv(GLMContext ctx, const GLint *v);
void mglWindowPos2s(GLMContext ctx, GLshort x, GLshort y);
void mglWindowPos2sv(GLMContext ctx, const GLshort *v);
void mglWindowPos3d(GLMContext ctx, GLdouble x, GLdouble y, GLdouble z);
void mglWindowPos3dv(GLMContext ctx, const GLdouble *v);
void mglWindowPos3f(GLMContext ctx, GLfloat x, GLfloat y, GLfloat z);
void mglWindowPos3fv(GLMContext ctx, const GLfloat *v);
void mglWindowPos3i(GLMContext ctx, GLint x, GLint y, GLint z);
void mglWindowPos3iv(GLMContext ctx, const GLint *v);
void mglWindowPos3s(GLMContext ctx, GLshort x, GLshort y, GLshort z);
void mglWindowPos3sv(GLMContext ctx, const GLshort *v);
void mglBlendColor(GLMContext ctx, GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
void mglBlendEquation(GLMContext ctx, GLenum mode);
void mglGenQueries(GLMContext ctx, GLsizei n, GLuint *ids);
void mglDeleteQueries(GLMContext ctx, GLsizei n, const GLuint *ids);
GLboolean mglIsQuery(GLMContext ctx, GLuint id);
void mglBeginQuery(GLMContext ctx, GLenum target, GLuint id);
void mglEndQuery(GLMContext ctx, GLenum target);
void mglGetQueryiv(GLMContext ctx, GLenum target, GLenum pname, GLint *params);
void mglGetQueryObjectiv(GLMContext ctx, GLuint id, GLenum pname, GLint *params);
void mglGetQueryObjectuiv(GLMContext ctx, GLuint id, GLenum pname, GLuint *params);
void mglBindBuffer(GLMContext ctx, GLenum target, GLuint buffer);
void mglDeleteBuffers(GLMContext ctx, GLsizei n, const GLuint *buffers);
void mglGenBuffers(GLMContext ctx, GLsizei n, GLuint *buffers);
GLboolean mglIsBuffer(GLMContext ctx, GLuint buffer);
void mglBufferData(GLMContext ctx, GLenum target, GLsizeiptr size, const void *data, GLenum usage);
void mglBufferSubData(GLMContext ctx, GLenum target, GLintptr offset, GLsizeiptr size, const void *data);
void mglGetBufferSubData(GLMContext ctx, GLenum target, GLintptr offset, GLsizeiptr size, void *data);
void *mglMapBuffer(GLMContext ctx, GLenum target, GLenum access);
GLboolean mglUnmapBuffer(GLMContext ctx, GLenum target);
void mglGetBufferParameteriv(GLMContext ctx, GLenum target, GLenum pname, GLint *params);
void mglGetBufferPointerv(GLMContext ctx, GLenum target, GLenum pname, void **params);
void mglBlendEquationSeparate(GLMContext ctx, GLenum modeRGB, GLenum modeAlpha);
void mglDrawBuffers(GLMContext ctx, GLsizei n, const GLenum *bufs);
void mglStencilOpSeparate(GLMContext ctx, GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
void mglStencilFuncSeparate(GLMContext ctx, GLenum face, GLenum func, GLint ref, GLuint mask);
void mglStencilMaskSeparate(GLMContext ctx, GLenum face, GLuint mask);
void mglAttachShader(GLMContext ctx, GLuint program, GLuint shader);
void mglBindAttribLocation(GLMContext ctx, GLuint program, GLuint index, const GLchar *name);
void mglCompileShader(GLMContext ctx, GLuint shader);
GLuint  mglCreateProgram(GLMContext ctx);
GLuint  mglCreateShader(GLMContext ctx, GLenum type);
void mglDeleteProgram(GLMContext ctx, GLuint program);
void mglDeleteShader(GLMContext ctx, GLuint shader);
void mglDetachShader(GLMContext ctx, GLuint program, GLuint shader);
void mglDisableVertexAttribArray(GLMContext ctx, GLuint index);
void mglEnableVertexAttribArray(GLMContext ctx, GLuint index);
void mglGetActiveAttrib(GLMContext ctx, GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
void mglGetActiveUniform(GLMContext ctx, GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
void mglGetAttachedShaders(GLMContext ctx, GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders);
GLint  mglGetAttribLocation(GLMContext ctx, GLuint program, const GLchar *name);
void mglGetProgramiv(GLMContext ctx, GLuint program, GLenum pname, GLint *params);
void mglGetProgramInfoLog(GLMContext ctx, GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
void mglGetShaderiv(GLMContext ctx, GLuint shader, GLenum pname, GLint *params);
void mglGetShaderInfoLog(GLMContext ctx, GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
void mglGetShaderSource(GLMContext ctx, GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
GLint  mglGetUniformLocation(GLMContext ctx, GLuint program, const GLchar *name);
void mglGetUniformfv(GLMContext ctx, GLuint program, GLint location, GLfloat *params);
void mglGetUniformiv(GLMContext ctx, GLuint program, GLint location, GLint *params);
void mglGetVertexAttribdv(GLMContext ctx, GLuint index, GLenum pname, GLdouble *params);
void mglGetVertexAttribfv(GLMContext ctx, GLuint index, GLenum pname, GLfloat *params);
void mglGetVertexAttribiv(GLMContext ctx, GLuint index, GLenum pname, GLint *params);
void mglGetVertexAttribPointerv(GLMContext ctx, GLuint index, GLenum pname, void **pointer);
GLboolean mglIsProgram(GLMContext ctx, GLuint program);
GLboolean mglIsShader(GLMContext ctx, GLuint shader);
void mglLinkProgram(GLMContext ctx, GLuint program);
void mglShaderSource(GLMContext ctx, GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length);
void mglUseProgram(GLMContext ctx, GLuint program);
void mglUniform1f(GLMContext ctx, GLint location, GLfloat v0);
void mglUniform2f(GLMContext ctx, GLint location, GLfloat v0, GLfloat v1);
void mglUniform3f(GLMContext ctx, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
void mglUniform4f(GLMContext ctx, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
void mglUniform1i(GLMContext ctx, GLint location, GLint v0);
void mglUniform2i(GLMContext ctx, GLint location, GLint v0, GLint v1);
void mglUniform3i(GLMContext ctx, GLint location, GLint v0, GLint v1, GLint v2);
void mglUniform4i(GLMContext ctx, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
void mglUniform1fv(GLMContext ctx, GLint location, GLsizei count, const GLfloat *value);
void mglUniform2fv(GLMContext ctx, GLint location, GLsizei count, const GLfloat *value);
void mglUniform3fv(GLMContext ctx, GLint location, GLsizei count, const GLfloat *value);
void mglUniform4fv(GLMContext ctx, GLint location, GLsizei count, const GLfloat *value);
void mglUniform1iv(GLMContext ctx, GLint location, GLsizei count, const GLint *value);
void mglUniform2iv(GLMContext ctx, GLint location, GLsizei count, const GLint *value);
void mglUniform3iv(GLMContext ctx, GLint location, GLsizei count, const GLint *value);
void mglUniform4iv(GLMContext ctx, GLint location, GLsizei count, const GLint *value);
void mglUniformMatrix2fv(GLMContext ctx, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void mglUniformMatrix3fv(GLMContext ctx, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void mglUniformMatrix4fv(GLMContext ctx, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void mglValidateProgram(GLMContext ctx, GLuint program);
void mglVertexAttrib1d(GLMContext ctx, GLuint index, GLdouble x);
void mglVertexAttrib1dv(GLMContext ctx, GLuint index, const GLdouble *v);
void mglVertexAttrib1f(GLMContext ctx, GLuint index, GLfloat x);
void mglVertexAttrib1fv(GLMContext ctx, GLuint index, const GLfloat *v);
void mglVertexAttrib1s(GLMContext ctx, GLuint index, GLshort x);
void mglVertexAttrib1sv(GLMContext ctx, GLuint index, const GLshort *v);
void mglVertexAttrib2d(GLMContext ctx, GLuint index, GLdouble x, GLdouble y);
void mglVertexAttrib2dv(GLMContext ctx, GLuint index, const GLdouble *v);
void mglVertexAttrib2f(GLMContext ctx, GLuint index, GLfloat x, GLfloat y);
void mglVertexAttrib2fv(GLMContext ctx, GLuint index, const GLfloat *v);
void mglVertexAttrib2s(GLMContext ctx, GLuint index, GLshort x, GLshort y);
void mglVertexAttrib2sv(GLMContext ctx, GLuint index, const GLshort *v);
void mglVertexAttrib3d(GLMContext ctx, GLuint index, GLdouble x, GLdouble y, GLdouble z);
void mglVertexAttrib3dv(GLMContext ctx, GLuint index, const GLdouble *v);
void mglVertexAttrib3f(GLMContext ctx, GLuint index, GLfloat x, GLfloat y, GLfloat z);
void mglVertexAttrib3fv(GLMContext ctx, GLuint index, const GLfloat *v);
void mglVertexAttrib3s(GLMContext ctx, GLuint index, GLshort x, GLshort y, GLshort z);
void mglVertexAttrib3sv(GLMContext ctx, GLuint index, const GLshort *v);
void mglVertexAttrib4Nbv(GLMContext ctx, GLuint index, const GLbyte *v);
void mglVertexAttrib4Niv(GLMContext ctx, GLuint index, const GLint *v);
void mglVertexAttrib4Nsv(GLMContext ctx, GLuint index, const GLshort *v);
void mglVertexAttrib4Nub(GLMContext ctx, GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
void mglVertexAttrib4Nubv(GLMContext ctx, GLuint index, const GLubyte *v);
void mglVertexAttrib4Nuiv(GLMContext ctx, GLuint index, const GLuint *v);
void mglVertexAttrib4Nusv(GLMContext ctx, GLuint index, const GLushort *v);
void mglVertexAttrib4bv(GLMContext ctx, GLuint index, const GLbyte *v);
void mglVertexAttrib4d(GLMContext ctx, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void mglVertexAttrib4dv(GLMContext ctx, GLuint index, const GLdouble *v);
void mglVertexAttrib4f(GLMContext ctx, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void mglVertexAttrib4fv(GLMContext ctx, GLuint index, const GLfloat *v);
void mglVertexAttrib4iv(GLMContext ctx, GLuint index, const GLint *v);
void mglVertexAttrib4s(GLMContext ctx, GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
void mglVertexAttrib4sv(GLMContext ctx, GLuint index, const GLshort *v);
void mglVertexAttrib4ubv(GLMContext ctx, GLuint index, const GLubyte *v);
void mglVertexAttrib4uiv(GLMContext ctx, GLuint index, const GLuint *v);
void mglVertexAttrib4usv(GLMContext ctx, GLuint index, const GLushort *v);
void mglVertexAttribPointer(GLMContext ctx, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer);
void mglUniformMatrix2x3fv(GLMContext ctx, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void mglUniformMatrix3x2fv(GLMContext ctx, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void mglUniformMatrix2x4fv(GLMContext ctx, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void mglUniformMatrix4x2fv(GLMContext ctx, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void mglUniformMatrix3x4fv(GLMContext ctx, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void mglUniformMatrix4x3fv(GLMContext ctx, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void mglColorMaski(GLMContext ctx, GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
void mglGetBooleani_v(GLMContext ctx, GLenum target, GLuint index, GLboolean *data);
void mglGetIntegeri_v(GLMContext ctx, GLenum target, GLuint index, GLint *data);
void mglEnablei(GLMContext ctx, GLenum target, GLuint index);
void mglDisablei(GLMContext ctx, GLenum target, GLuint index);
GLboolean mglIsEnabledi(GLMContext ctx, GLenum target, GLuint index);
void mglBeginTransformFeedback(GLMContext ctx, GLenum primitiveMode);
void mglEndTransformFeedback(GLMContext ctx);
void mglBindBufferRange(GLMContext ctx, GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
void mglBindBufferBase(GLMContext ctx, GLenum target, GLuint index, GLuint buffer);
void mglTransformFeedbackVaryings(GLMContext ctx, GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode);
void mglGetTransformFeedbackVarying(GLMContext ctx, GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
void mglClampColor(GLMContext ctx, GLenum target, GLenum clamp);
void mglBeginConditionalRender(GLMContext ctx, GLuint id, GLenum mode);
void mglEndConditionalRender(GLMContext ctx);
void mglVertexAttribIPointer(GLMContext ctx, GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
void mglGetVertexAttribIiv(GLMContext ctx, GLuint index, GLenum pname, GLint *params);
void mglGetVertexAttribIuiv(GLMContext ctx, GLuint index, GLenum pname, GLuint *params);
void mglVertexAttribI1i(GLMContext ctx, GLuint index, GLint x);
void mglVertexAttribI2i(GLMContext ctx, GLuint index, GLint x, GLint y);
void mglVertexAttribI3i(GLMContext ctx, GLuint index, GLint x, GLint y, GLint z);
void mglVertexAttribI4i(GLMContext ctx, GLuint index, GLint x, GLint y, GLint z, GLint w);
void mglVertexAttribI1ui(GLMContext ctx, GLuint index, GLuint x);
void mglVertexAttribI2ui(GLMContext ctx, GLuint index, GLuint x, GLuint y);
void mglVertexAttribI3ui(GLMContext ctx, GLuint index, GLuint x, GLuint y, GLuint z);
void mglVertexAttribI4ui(GLMContext ctx, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
void mglVertexAttribI1iv(GLMContext ctx, GLuint index, const GLint *v);
void mglVertexAttribI2iv(GLMContext ctx, GLuint index, const GLint *v);
void mglVertexAttribI3iv(GLMContext ctx, GLuint index, const GLint *v);
void mglVertexAttribI4iv(GLMContext ctx, GLuint index, const GLint *v);
void mglVertexAttribI1uiv(GLMContext ctx, GLuint index, const GLuint *v);
void mglVertexAttribI2uiv(GLMContext ctx, GLuint index, const GLuint *v);
void mglVertexAttribI3uiv(GLMContext ctx, GLuint index, const GLuint *v);
void mglVertexAttribI4uiv(GLMContext ctx, GLuint index, const GLuint *v);
void mglVertexAttribI4bv(GLMContext ctx, GLuint index, const GLbyte *v);
void mglVertexAttribI4sv(GLMContext ctx, GLuint index, const GLshort *v);
void mglVertexAttribI4ubv(GLMContext ctx, GLuint index, const GLubyte *v);
void mglVertexAttribI4usv(GLMContext ctx, GLuint index, const GLushort *v);
void mglGetUniformuiv(GLMContext ctx, GLuint program, GLint location, GLuint *params);
void mglBindFragDataLocation(GLMContext ctx, GLuint program, GLuint color, const GLchar *name);
GLint  mglGetFragDataLocation(GLMContext ctx, GLuint program, const GLchar *name);
void mglUniform1ui(GLMContext ctx, GLint location, GLuint v0);
void mglUniform2ui(GLMContext ctx, GLint location, GLuint v0, GLuint v1);
void mglUniform3ui(GLMContext ctx, GLint location, GLuint v0, GLuint v1, GLuint v2);
void mglUniform4ui(GLMContext ctx, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
void mglUniform1uiv(GLMContext ctx, GLint location, GLsizei count, const GLuint *value);
void mglUniform2uiv(GLMContext ctx, GLint location, GLsizei count, const GLuint *value);
void mglUniform3uiv(GLMContext ctx, GLint location, GLsizei count, const GLuint *value);
void mglUniform4uiv(GLMContext ctx, GLint location, GLsizei count, const GLuint *value);
void mglTexParameterIiv(GLMContext ctx, GLenum target, GLenum pname, const GLint *params);
void mglTexParameterIuiv(GLMContext ctx, GLenum target, GLenum pname, const GLuint *params);
void mglGetTexParameterIiv(GLMContext ctx, GLenum target, GLenum pname, GLint *params);
void mglGetTexParameterIuiv(GLMContext ctx, GLenum target, GLenum pname, GLuint *params);
void mglClearBufferiv(GLMContext ctx, GLenum buffer, GLint drawbuffer, const GLint *value);
void mglClearBufferuiv(GLMContext ctx, GLenum buffer, GLint drawbuffer, const GLuint *value);
void mglClearBufferfv(GLMContext ctx, GLenum buffer, GLint drawbuffer, const GLfloat *value);
void mglClearBufferfi(GLMContext ctx, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
const GLubyte  *mglGetStringi(GLMContext ctx, GLenum name, GLuint index);
GLboolean mglIsRenderbuffer(GLMContext ctx, GLuint renderbuffer);
void mglBindRenderbuffer(GLMContext ctx, GLenum target, GLuint renderbuffer);
void mglDeleteRenderbuffers(GLMContext ctx, GLsizei n, const GLuint *renderbuffers);
void mglGenRenderbuffers(GLMContext ctx, GLsizei n, GLuint *renderbuffers);
void mglRenderbufferStorage(GLMContext ctx, GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
void mglGetRenderbufferParameteriv(GLMContext ctx, GLenum target, GLenum pname, GLint *params);
GLboolean mglIsFramebuffer(GLMContext ctx, GLuint framebuffer);
void mglBindFramebuffer(GLMContext ctx, GLenum target, GLuint framebuffer);
void mglDeleteFramebuffers(GLMContext ctx, GLsizei n, const GLuint *framebuffers);
void mglGenFramebuffers(GLMContext ctx, GLsizei n, GLuint *framebuffers);
GLenum  mglCheckFramebufferStatus(GLMContext ctx, GLenum target);
void mglFramebufferTexture1D(GLMContext ctx, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
void mglFramebufferTexture2D(GLMContext ctx, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
void mglFramebufferTexture3D(GLMContext ctx, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
void mglFramebufferRenderbuffer(GLMContext ctx, GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
void mglGetFramebufferAttachmentParameteriv(GLMContext ctx, GLenum target, GLenum attachment, GLenum pname, GLint *params);
void mglGenerateMipmap(GLMContext ctx, GLenum target);
void mglBlitFramebuffer(GLMContext ctx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
void mglRenderbufferStorageMultisample(GLMContext ctx, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
void mglFramebufferTextureLayer(GLMContext ctx, GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
void *mglMapBufferRange(GLMContext ctx, GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
void mglFlushMappedBufferRange(GLMContext ctx, GLenum target, GLintptr offset, GLsizeiptr length);
void mglBindVertexArray(GLMContext ctx, GLuint array);
void mglDeleteVertexArrays(GLMContext ctx, GLsizei n, const GLuint *arrays);
void mglGenVertexArrays(GLMContext ctx, GLsizei n, GLuint *arrays);
GLboolean mglIsVertexArray(GLMContext ctx, GLuint array);
void mglDrawArraysInstanced(GLMContext ctx, GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
void mglDrawElementsInstanced(GLMContext ctx, GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount);
void mglTexBuffer(GLMContext ctx, GLenum target, GLenum internalformat, GLuint buffer);
void mglPrimitiveRestartIndex(GLMContext ctx, GLuint index);
void mglCopyBufferSubData(GLMContext ctx, GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
void mglGetUniformIndices(GLMContext ctx, GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices);
void mglGetActiveUniformsiv(GLMContext ctx, GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
void mglGetActiveUniformName(GLMContext ctx, GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
GLuint  mglGetUniformBlockIndex(GLMContext ctx, GLuint program, const GLchar *uniformBlockName);
void mglGetActiveUniformBlockiv(GLMContext ctx, GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
void mglGetActiveUniformBlockName(GLMContext ctx, GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
void mglUniformBlockBinding(GLMContext ctx, GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
void mglBindBufferRange(GLMContext ctx, GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
void mglBindBufferBase(GLMContext ctx, GLenum target, GLuint index, GLuint buffer);
void mglGetIntegeri_v(GLMContext ctx, GLenum target, GLuint index, GLint *data);
void mglDrawElementsBaseVertex(GLMContext ctx, GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex);
void mglDrawRangeElementsBaseVertex(GLMContext ctx, GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex);
void mglDrawElementsInstancedBaseVertex(GLMContext ctx, GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex);
void mglMultiDrawElementsBaseVertex(GLMContext ctx, GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex);
void mglProvokingVertex(GLMContext ctx, GLenum mode);
GLsync  mglFenceSync(GLMContext ctx, GLenum condition, GLbitfield flags);
GLboolean mglIsSync(GLMContext ctx, GLsync sync);
void mglDeleteSync(GLMContext ctx, GLsync sync);
GLenum  mglClientWaitSync(GLMContext ctx, GLsync sync, GLbitfield flags, GLuint64 timeout);
void mglWaitSync(GLMContext ctx, GLsync sync, GLbitfield flags, GLuint64 timeout);
void mglGetInteger64v(GLMContext ctx, GLenum pname, GLint64 *data);
void mglGetSynciv(GLMContext ctx, GLsync sync, GLenum pname, GLsizei count, GLsizei *length, GLint *values);
void mglGetInteger64i_v(GLMContext ctx, GLenum target, GLuint index, GLint64 *data);
void mglGetBufferParameteri64v(GLMContext ctx, GLenum target, GLenum pname, GLint64 *params);
void mglFramebufferTexture(GLMContext ctx, GLenum target, GLenum attachment, GLuint texture, GLint level);
void mglTexImage2DMultisample(GLMContext ctx, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
void mglTexImage3DMultisample(GLMContext ctx, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
void mglGetMultisamplefv(GLMContext ctx, GLenum pname, GLuint index, GLfloat *val);
void mglSampleMaski(GLMContext ctx, GLuint maskNumber, GLbitfield mask);
void mglBindFragDataLocationIndexed(GLMContext ctx, GLuint program, GLuint colorNumber, GLuint index, const GLchar *name);
GLint  mglGetFragDataIndex(GLMContext ctx, GLuint program, const GLchar *name);
void mglGenSamplers(GLMContext ctx, GLsizei count, GLuint *samplers);
void mglDeleteSamplers(GLMContext ctx, GLsizei count, const GLuint *samplers);
GLboolean mglIsSampler(GLMContext ctx, GLuint sampler);
void mglBindSampler(GLMContext ctx, GLuint unit, GLuint sampler);
void mglSamplerParameteri(GLMContext ctx, GLuint sampler, GLenum pname, GLint param);
void mglSamplerParameteriv(GLMContext ctx, GLuint sampler, GLenum pname, const GLint *param);
void mglSamplerParameterf(GLMContext ctx, GLuint sampler, GLenum pname, GLfloat param);
void mglSamplerParameterfv(GLMContext ctx, GLuint sampler, GLenum pname, const GLfloat *param);
void mglSamplerParameterIiv(GLMContext ctx, GLuint sampler, GLenum pname, const GLint *param);
void mglSamplerParameterIuiv(GLMContext ctx, GLuint sampler, GLenum pname, const GLuint *param);
void mglGetSamplerParameteriv(GLMContext ctx, GLuint sampler, GLenum pname, GLint *params);
void mglGetSamplerParameterIiv(GLMContext ctx, GLuint sampler, GLenum pname, GLint *params);
void mglGetSamplerParameterfv(GLMContext ctx, GLuint sampler, GLenum pname, GLfloat *params);
void mglGetSamplerParameterIuiv(GLMContext ctx, GLuint sampler, GLenum pname, GLuint *params);
void mglQueryCounter(GLMContext ctx, GLuint id, GLenum target);
void mglGetQueryObjecti64v(GLMContext ctx, GLuint id, GLenum pname, GLint64 *params);
void mglGetQueryObjectui64v(GLMContext ctx, GLuint id, GLenum pname, GLuint64 *params);
void mglVertexAttribDivisor(GLMContext ctx, GLuint index, GLuint divisor);
void mglVertexAttribP1ui(GLMContext ctx, GLuint index, GLenum type, GLboolean normalized, GLuint value);
void mglVertexAttribP1uiv(GLMContext ctx, GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
void mglVertexAttribP2ui(GLMContext ctx, GLuint index, GLenum type, GLboolean normalized, GLuint value);
void mglVertexAttribP2uiv(GLMContext ctx, GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
void mglVertexAttribP3ui(GLMContext ctx, GLuint index, GLenum type, GLboolean normalized, GLuint value);
void mglVertexAttribP3uiv(GLMContext ctx, GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
void mglVertexAttribP4ui(GLMContext ctx, GLuint index, GLenum type, GLboolean normalized, GLuint value);
void mglVertexAttribP4uiv(GLMContext ctx, GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
void mglVertexP2ui(GLMContext ctx, GLenum type, GLuint value);
void mglVertexP2uiv(GLMContext ctx, GLenum type, const GLuint *value);
void mglVertexP3ui(GLMContext ctx, GLenum type, GLuint value);
void mglVertexP3uiv(GLMContext ctx, GLenum type, const GLuint *value);
void mglVertexP4ui(GLMContext ctx, GLenum type, GLuint value);
void mglVertexP4uiv(GLMContext ctx, GLenum type, const GLuint *value);
void mglTexCoordP1ui(GLMContext ctx, GLenum type, GLuint coords);
void mglTexCoordP1uiv(GLMContext ctx, GLenum type, const GLuint *coords);
void mglTexCoordP2ui(GLMContext ctx, GLenum type, GLuint coords);
void mglTexCoordP2uiv(GLMContext ctx, GLenum type, const GLuint *coords);
void mglTexCoordP3ui(GLMContext ctx, GLenum type, GLuint coords);
void mglTexCoordP3uiv(GLMContext ctx, GLenum type, const GLuint *coords);
void mglTexCoordP4ui(GLMContext ctx, GLenum type, GLuint coords);
void mglTexCoordP4uiv(GLMContext ctx, GLenum type, const GLuint *coords);
void mglMultiTexCoordP1ui(GLMContext ctx, GLenum texture, GLenum type, GLuint coords);
void mglMultiTexCoordP1uiv(GLMContext ctx, GLenum texture, GLenum type, const GLuint *coords);
void mglMultiTexCoordP2ui(GLMContext ctx, GLenum texture, GLenum type, GLuint coords);
void mglMultiTexCoordP2uiv(GLMContext ctx, GLenum texture, GLenum type, const GLuint *coords);
void mglMultiTexCoordP3ui(GLMContext ctx, GLenum texture, GLenum type, GLuint coords);
void mglMultiTexCoordP3uiv(GLMContext ctx, GLenum texture, GLenum type, const GLuint *coords);
void mglMultiTexCoordP4ui(GLMContext ctx, GLenum texture, GLenum type, GLuint coords);
void mglMultiTexCoordP4uiv(GLMContext ctx, GLenum texture, GLenum type, const GLuint *coords);
void mglNormalP3ui(GLMContext ctx, GLenum type, GLuint coords);
void mglNormalP3uiv(GLMContext ctx, GLenum type, const GLuint *coords);
void mglColorP3ui(GLMContext ctx, GLenum type, GLuint color);
void mglColorP3uiv(GLMContext ctx, GLenum type, const GLuint *color);
void mglColorP4ui(GLMContext ctx, GLenum type, GLuint color);
void mglColorP4uiv(GLMContext ctx, GLenum type, const GLuint *color);
void mglSecondaryColorP3ui(GLMContext ctx, GLenum type, GLuint color);
void mglSecondaryColorP3uiv(GLMContext ctx, GLenum type, const GLuint *color);
void mglMinSampleShading(GLMContext ctx, GLfloat value);
void mglBlendEquationi(GLMContext ctx, GLuint buf, GLenum mode);
void mglBlendEquationSeparatei(GLMContext ctx, GLuint buf, GLenum modeRGB, GLenum modeAlpha);
void mglBlendFunci(GLMContext ctx, GLuint buf, GLenum src, GLenum dst);
void mglBlendFuncSeparatei(GLMContext ctx, GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
void mglDrawArraysIndirect(GLMContext ctx, GLenum mode, const void *indirect);
void mglDrawElementsIndirect(GLMContext ctx, GLenum mode, GLenum type, const void *indirect);
void mglUniform1d(GLMContext ctx, GLint location, GLdouble x);
void mglUniform2d(GLMContext ctx, GLint location, GLdouble x, GLdouble y);
void mglUniform3d(GLMContext ctx, GLint location, GLdouble x, GLdouble y, GLdouble z);
void mglUniform4d(GLMContext ctx, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void mglUniform1dv(GLMContext ctx, GLint location, GLsizei count, const GLdouble *value);
void mglUniform2dv(GLMContext ctx, GLint location, GLsizei count, const GLdouble *value);
void mglUniform3dv(GLMContext ctx, GLint location, GLsizei count, const GLdouble *value);
void mglUniform4dv(GLMContext ctx, GLint location, GLsizei count, const GLdouble *value);
void mglUniformMatrix2dv(GLMContext ctx, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void mglUniformMatrix3dv(GLMContext ctx, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void mglUniformMatrix4dv(GLMContext ctx, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void mglUniformMatrix2x3dv(GLMContext ctx, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void mglUniformMatrix2x4dv(GLMContext ctx, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void mglUniformMatrix3x2dv(GLMContext ctx, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void mglUniformMatrix3x4dv(GLMContext ctx, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void mglUniformMatrix4x2dv(GLMContext ctx, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void mglUniformMatrix4x3dv(GLMContext ctx, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void mglGetUniformdv(GLMContext ctx, GLuint program, GLint location, GLdouble *params);
GLint  mglGetSubroutineUniformLocation(GLMContext ctx, GLuint program, GLenum shadertype, const GLchar *name);
GLuint  mglGetSubroutineIndex(GLMContext ctx, GLuint program, GLenum shadertype, const GLchar *name);
void mglGetActiveSubroutineUniformiv(GLMContext ctx, GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values);
void mglGetActiveSubroutineUniformName(GLMContext ctx, GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
void mglGetActiveSubroutineName(GLMContext ctx, GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
void mglUniformSubroutinesuiv(GLMContext ctx, GLenum shadertype, GLsizei count, const GLuint *indices);
void mglGetUniformSubroutineuiv(GLMContext ctx, GLenum shadertype, GLint location, GLuint *params);
void mglGetProgramStageiv(GLMContext ctx, GLuint program, GLenum shadertype, GLenum pname, GLint *values);
void mglPatchParameteri(GLMContext ctx, GLenum pname, GLint value);
void mglPatchParameterfv(GLMContext ctx, GLenum pname, const GLfloat *values);
void mglBindTransformFeedback(GLMContext ctx, GLenum target, GLuint id);
void mglDeleteTransformFeedbacks(GLMContext ctx, GLsizei n, const GLuint *ids);
void mglGenTransformFeedbacks(GLMContext ctx, GLsizei n, GLuint *ids);
GLboolean mglIsTransformFeedback(GLMContext ctx, GLuint id);
void mglPauseTransformFeedback(GLMContext ctx);
void mglResumeTransformFeedback(GLMContext ctx);
void mglDrawTransformFeedback(GLMContext ctx, GLenum mode, GLuint id);
void mglDrawTransformFeedbackStream(GLMContext ctx, GLenum mode, GLuint id, GLuint stream);
void mglBeginQueryIndexed(GLMContext ctx, GLenum target, GLuint index, GLuint id);
void mglEndQueryIndexed(GLMContext ctx, GLenum target, GLuint index);
void mglGetQueryIndexediv(GLMContext ctx, GLenum target, GLuint index, GLenum pname, GLint *params);
void mglReleaseShaderCompiler(GLMContext ctx);
void mglShaderBinary(GLMContext ctx, GLsizei count, const GLuint *shaders, GLenum binaryFormat, const void *binary, GLsizei length);
void mglGetShaderPrecisionFormat(GLMContext ctx, GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);
void mglDepthRangef(GLMContext ctx, GLfloat n, GLfloat f);
void mglClearDepthf(GLMContext ctx, GLfloat d);
void mglGetProgramBinary(GLMContext ctx, GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary);
void mglProgramBinary(GLMContext ctx, GLuint program, GLenum binaryFormat, const void *binary, GLsizei length);
void mglProgramParameteri(GLMContext ctx, GLuint program, GLenum pname, GLint value);
void mglUseProgramStages(GLMContext ctx, GLuint pipeline, GLbitfield stages, GLuint program);
void mglActiveShaderProgram(GLMContext ctx, GLuint pipeline, GLuint program);
GLuint  mglCreateShaderProgramv(GLMContext ctx, GLenum type, GLsizei count, const GLchar *const*strings);
void mglBindProgramPipeline(GLMContext ctx, GLuint pipeline);
void mglDeleteProgramPipelines(GLMContext ctx, GLsizei n, const GLuint *pipelines);
void mglGenProgramPipelines(GLMContext ctx, GLsizei n, GLuint *pipelines);
GLboolean mglIsProgramPipeline(GLMContext ctx, GLuint pipeline);
void mglGetProgramPipelineiv(GLMContext ctx, GLuint pipeline, GLenum pname, GLint *params);
void mglProgramParameteri(GLMContext ctx, GLuint program, GLenum pname, GLint value);
void mglProgramUniform1i(GLMContext ctx, GLuint program, GLint location, GLint v0);
void mglProgramUniform1iv(GLMContext ctx, GLuint program, GLint location, GLsizei count, const GLint *value);
void mglProgramUniform1f(GLMContext ctx, GLuint program, GLint location, GLfloat v0);
void mglProgramUniform1fv(GLMContext ctx, GLuint program, GLint location, GLsizei count, const GLfloat *value);
void mglProgramUniform1d(GLMContext ctx, GLuint program, GLint location, GLdouble v0);
void mglProgramUniform1dv(GLMContext ctx, GLuint program, GLint location, GLsizei count, const GLdouble *value);
void mglProgramUniform1ui(GLMContext ctx, GLuint program, GLint location, GLuint v0);
void mglProgramUniform1uiv(GLMContext ctx, GLuint program, GLint location, GLsizei count, const GLuint *value);
void mglProgramUniform2i(GLMContext ctx, GLuint program, GLint location, GLint v0, GLint v1);
void mglProgramUniform2iv(GLMContext ctx, GLuint program, GLint location, GLsizei count, const GLint *value);
void mglProgramUniform2f(GLMContext ctx, GLuint program, GLint location, GLfloat v0, GLfloat v1);
void mglProgramUniform2fv(GLMContext ctx, GLuint program, GLint location, GLsizei count, const GLfloat *value);
void mglProgramUniform2d(GLMContext ctx, GLuint program, GLint location, GLdouble v0, GLdouble v1);
void mglProgramUniform2dv(GLMContext ctx, GLuint program, GLint location, GLsizei count, const GLdouble *value);
void mglProgramUniform2ui(GLMContext ctx, GLuint program, GLint location, GLuint v0, GLuint v1);
void mglProgramUniform2uiv(GLMContext ctx, GLuint program, GLint location, GLsizei count, const GLuint *value);
void mglProgramUniform3i(GLMContext ctx, GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
void mglProgramUniform3iv(GLMContext ctx, GLuint program, GLint location, GLsizei count, const GLint *value);
void mglProgramUniform3f(GLMContext ctx, GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
void mglProgramUniform3fv(GLMContext ctx, GLuint program, GLint location, GLsizei count, const GLfloat *value);
void mglProgramUniform3d(GLMContext ctx, GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
void mglProgramUniform3dv(GLMContext ctx, GLuint program, GLint location, GLsizei count, const GLdouble *value);
void mglProgramUniform3ui(GLMContext ctx, GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
void mglProgramUniform3uiv(GLMContext ctx, GLuint program, GLint location, GLsizei count, const GLuint *value);
void mglProgramUniform4i(GLMContext ctx, GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
void mglProgramUniform4iv(GLMContext ctx, GLuint program, GLint location, GLsizei count, const GLint *value);
void mglProgramUniform4f(GLMContext ctx, GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
void mglProgramUniform4fv(GLMContext ctx, GLuint program, GLint location, GLsizei count, const GLfloat *value);
void mglProgramUniform4d(GLMContext ctx, GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
void mglProgramUniform4dv(GLMContext ctx, GLuint program, GLint location, GLsizei count, const GLdouble *value);
void mglProgramUniform4ui(GLMContext ctx, GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
void mglProgramUniform4uiv(GLMContext ctx, GLuint program, GLint location, GLsizei count, const GLuint *value);
void mglProgramUniformMatrix2fv(GLMContext ctx, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void mglProgramUniformMatrix3fv(GLMContext ctx, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void mglProgramUniformMatrix4fv(GLMContext ctx, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void mglProgramUniformMatrix2dv(GLMContext ctx, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void mglProgramUniformMatrix3dv(GLMContext ctx, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void mglProgramUniformMatrix4dv(GLMContext ctx, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void mglProgramUniformMatrix2x3fv(GLMContext ctx, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void mglProgramUniformMatrix3x2fv(GLMContext ctx, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void mglProgramUniformMatrix2x4fv(GLMContext ctx, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void mglProgramUniformMatrix4x2fv(GLMContext ctx, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void mglProgramUniformMatrix3x4fv(GLMContext ctx, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void mglProgramUniformMatrix4x3fv(GLMContext ctx, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void mglProgramUniformMatrix2x3dv(GLMContext ctx, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void mglProgramUniformMatrix3x2dv(GLMContext ctx, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void mglProgramUniformMatrix2x4dv(GLMContext ctx, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void mglProgramUniformMatrix4x2dv(GLMContext ctx, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void mglProgramUniformMatrix3x4dv(GLMContext ctx, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void mglProgramUniformMatrix4x3dv(GLMContext ctx, GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void mglValidateProgramPipeline(GLMContext ctx, GLuint pipeline);
void mglGetProgramPipelineInfoLog(GLMContext ctx, GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
void mglVertexAttribL1d(GLMContext ctx, GLuint index, GLdouble x);
void mglVertexAttribL2d(GLMContext ctx, GLuint index, GLdouble x, GLdouble y);
void mglVertexAttribL3d(GLMContext ctx, GLuint index, GLdouble x, GLdouble y, GLdouble z);
void mglVertexAttribL4d(GLMContext ctx, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void mglVertexAttribL1dv(GLMContext ctx, GLuint index, const GLdouble *v);
void mglVertexAttribL2dv(GLMContext ctx, GLuint index, const GLdouble *v);
void mglVertexAttribL3dv(GLMContext ctx, GLuint index, const GLdouble *v);
void mglVertexAttribL4dv(GLMContext ctx, GLuint index, const GLdouble *v);
void mglVertexAttribLPointer(GLMContext ctx, GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
void mglGetVertexAttribLdv(GLMContext ctx, GLuint index, GLenum pname, GLdouble *params);
void mglViewportArrayv(GLMContext ctx, GLuint first, GLsizei count, const GLfloat *v);
void mglViewportIndexedf(GLMContext ctx, GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
void mglViewportIndexedfv(GLMContext ctx, GLuint index, const GLfloat *v);
void mglScissorArrayv(GLMContext ctx, GLuint first, GLsizei count, const GLint *v);
void mglScissorIndexed(GLMContext ctx, GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
void mglScissorIndexedv(GLMContext ctx, GLuint index, const GLint *v);
void mglDepthRangeArrayv(GLMContext ctx, GLuint first, GLsizei count, const GLdouble *v);
void mglDepthRangeIndexed(GLMContext ctx, GLuint index, GLdouble n, GLdouble f);
void mglGetFloati_v(GLMContext ctx, GLenum target, GLuint index, GLfloat *data);
void mglGetDoublei_v(GLMContext ctx, GLenum target, GLuint index, GLdouble *data);
void mglDrawArraysInstancedBaseInstance(GLMContext ctx, GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);
void mglDrawElementsInstancedBaseInstance(GLMContext ctx, GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance);
void mglDrawElementsInstancedBaseVertexBaseInstance(GLMContext ctx, GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);
void mglGetInternalformativ(GLMContext ctx, GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint *params);
void mglGetActiveAtomicCounterBufferiv(GLMContext ctx, GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
void mglBindImageTexture(GLMContext ctx, GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
void mglMemoryBarrier(GLMContext ctx, GLbitfield barriers);
void mglTexStorage1D(GLMContext ctx, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
void mglTexStorage2D(GLMContext ctx, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
void mglTexStorage3D(GLMContext ctx, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
void mglDrawTransformFeedbackInstanced(GLMContext ctx, GLenum mode, GLuint id, GLsizei instancecount);
void mglDrawTransformFeedbackStreamInstanced(GLMContext ctx, GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);
void mglClearBufferData(GLMContext ctx, GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data);
void mglClearBufferSubData(GLMContext ctx, GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
void mglDispatchCompute(GLMContext ctx, GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
void mglDispatchComputeIndirect(GLMContext ctx, GLintptr indirect);
void mglCopyImageSubData(GLMContext ctx, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
void mglFramebufferParameteri(GLMContext ctx, GLenum target, GLenum pname, GLint param);
void mglGetFramebufferParameteriv(GLMContext ctx, GLenum target, GLenum pname, GLint *params);
void mglGetInternalformati64v(GLMContext ctx, GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint64 *params);
void mglInvalidateTexSubImage(GLMContext ctx, GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
void mglInvalidateTexImage(GLMContext ctx, GLuint texture, GLint level);
void mglInvalidateBufferSubData(GLMContext ctx, GLuint buffer, GLintptr offset, GLsizeiptr length);
void mglInvalidateBufferData(GLMContext ctx, GLuint buffer);
void mglInvalidateFramebuffer(GLMContext ctx, GLenum target, GLsizei numAttachments, const GLenum *attachments);
void mglInvalidateSubFramebuffer(GLMContext ctx, GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
void mglMultiDrawArraysIndirect(GLMContext ctx, GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride);
void mglMultiDrawElementsIndirect(GLMContext ctx, GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride);
void mglGetProgramInterfaceiv(GLMContext ctx, GLuint program, GLenum programInterface, GLenum pname, GLint *params);
GLuint  mglGetProgramResourceIndex(GLMContext ctx, GLuint program, GLenum programInterface, const GLchar *name);
void mglGetProgramResourceName(GLMContext ctx, GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
void mglGetProgramResourceiv(GLMContext ctx, GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei count, GLsizei *length, GLint *params);
GLint  mglGetProgramResourceLocation(GLMContext ctx, GLuint program, GLenum programInterface, const GLchar *name);
GLint  mglGetProgramResourceLocationIndex(GLMContext ctx, GLuint program, GLenum programInterface, const GLchar *name);
void mglShaderStorageBlockBinding(GLMContext ctx, GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);
void mglTexBufferRange(GLMContext ctx, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
void mglTexStorage2DMultisample(GLMContext ctx, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
void mglTexStorage3DMultisample(GLMContext ctx, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
void mglTextureView(GLMContext ctx, GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
void mglBindVertexBuffer(GLMContext ctx, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
void mglVertexAttribFormat(GLMContext ctx, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
void mglVertexAttribIFormat(GLMContext ctx, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
void mglVertexAttribLFormat(GLMContext ctx, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
void mglVertexAttribBinding(GLMContext ctx, GLuint attribindex, GLuint bindingindex);
void mglVertexBindingDivisor(GLMContext ctx, GLuint bindingindex, GLuint divisor);
void mglDebugMessageControl(GLMContext ctx, GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
void mglDebugMessageInsert(GLMContext ctx, GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
void mglDebugMessageCallback(GLMContext ctx, GLDEBUGPROC callback, const void *userParam);
GLuint  mglGetDebugMessageLog(GLMContext ctx, GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
void mglPushDebugGroup(GLMContext ctx, GLenum source, GLuint id, GLsizei length, const GLchar *message);
void mglPopDebugGroup(GLMContext ctx);
void mglObjectLabel(GLMContext ctx, GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
void mglGetObjectLabel(GLMContext ctx, GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
void mglObjectPtrLabel(GLMContext ctx, const void *ptr, GLsizei length, const GLchar *label);
void mglGetObjectPtrLabel(GLMContext ctx, const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
void mglGetPointerv(GLMContext ctx, GLenum pname, void **params);
void mglBufferStorage(GLMContext ctx, GLenum target, GLsizeiptr size, const void *data, GLbitfield flags);
void mglClearTexImage(GLMContext ctx, GLuint texture, GLint level, GLenum format, GLenum type, const void *data);
void mglClearTexSubImage(GLMContext ctx, GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data);
void mglBindBuffersBase(GLMContext ctx, GLenum target, GLuint first, GLsizei count, const GLuint *buffers);
void mglBindBuffersRange(GLMContext ctx, GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes);
void mglBindTextures(GLMContext ctx, GLuint first, GLsizei count, const GLuint *textures);
void mglBindSamplers(GLMContext ctx, GLuint first, GLsizei count, const GLuint *samplers);
void mglBindImageTextures(GLMContext ctx, GLuint first, GLsizei count, const GLuint *textures);
void mglBindVertexBuffers(GLMContext ctx, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);
void mglClipControl(GLMContext ctx, GLenum origin, GLenum depth);
void mglCreateTransformFeedbacks(GLMContext ctx, GLsizei n, GLuint *ids);
void mglTransformFeedbackBufferBase(GLMContext ctx, GLuint xfb, GLuint index, GLuint buffer);
void mglTransformFeedbackBufferRange(GLMContext ctx, GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
void mglGetTransformFeedbackiv(GLMContext ctx, GLuint xfb, GLenum pname, GLint *param);
void mglGetTransformFeedbacki_v(GLMContext ctx, GLuint xfb, GLenum pname, GLuint index, GLint *param);
void mglGetTransformFeedbacki64_v(GLMContext ctx, GLuint xfb, GLenum pname, GLuint index, GLint64 *param);
void mglCreateBuffers(GLMContext ctx, GLsizei n, GLuint *buffers);
void mglNamedBufferStorage(GLMContext ctx, GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags);
void mglNamedBufferData(GLMContext ctx, GLuint buffer, GLsizeiptr size, const void *data, GLenum usage);
void mglNamedBufferSubData(GLMContext ctx, GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data);
void mglCopyNamedBufferSubData(GLMContext ctx, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
void mglClearNamedBufferData(GLMContext ctx, GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data);
void mglClearNamedBufferSubData(GLMContext ctx, GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
void *mglMapNamedBuffer(GLMContext ctx, GLuint buffer, GLenum access);
void *mglMapNamedBufferRange(GLMContext ctx, GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
GLboolean mglUnmapNamedBuffer(GLMContext ctx, GLuint buffer);
void mglFlushMappedNamedBufferRange(GLMContext ctx, GLuint buffer, GLintptr offset, GLsizeiptr length);
void mglGetNamedBufferParameteriv(GLMContext ctx, GLuint buffer, GLenum pname, GLint *params);
void mglGetNamedBufferParameteri64v(GLMContext ctx, GLuint buffer, GLenum pname, GLint64 *params);
void mglGetNamedBufferPointerv(GLMContext ctx, GLuint buffer, GLenum pname, void **params);
void mglGetNamedBufferSubData(GLMContext ctx, GLuint buffer, GLintptr offset, GLsizeiptr size, void *data);
void mglCreateFramebuffers(GLMContext ctx, GLsizei n, GLuint *framebuffers);
void mglNamedFramebufferRenderbuffer(GLMContext ctx, GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
void mglNamedFramebufferParameteri(GLMContext ctx, GLuint framebuffer, GLenum pname, GLint param);
void mglNamedFramebufferTexture(GLMContext ctx, GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
void mglNamedFramebufferTextureLayer(GLMContext ctx, GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
void mglNamedFramebufferDrawBuffer(GLMContext ctx, GLuint framebuffer, GLenum buf);
void mglNamedFramebufferDrawBuffers(GLMContext ctx, GLuint framebuffer, GLsizei n, const GLenum *bufs);
void mglNamedFramebufferReadBuffer(GLMContext ctx, GLuint framebuffer, GLenum src);
void mglInvalidateNamedFramebufferData(GLMContext ctx, GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments);
void mglInvalidateNamedFramebufferSubData(GLMContext ctx, GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
void mglClearNamedFramebufferiv(GLMContext ctx, GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value);
void mglClearNamedFramebufferuiv(GLMContext ctx, GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value);
void mglClearNamedFramebufferfv(GLMContext ctx, GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value);
void mglClearNamedFramebufferfi(GLMContext ctx, GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
void mglBlitNamedFramebuffer(GLMContext ctx, GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
GLenum  mglCheckNamedFramebufferStatus(GLMContext ctx, GLuint framebuffer, GLenum target);
void mglGetNamedFramebufferParameteriv(GLMContext ctx, GLuint framebuffer, GLenum pname, GLint *param);
void mglGetNamedFramebufferAttachmentParameteriv(GLMContext ctx, GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params);
void mglCreateRenderbuffers(GLMContext ctx, GLsizei n, GLuint *renderbuffers);
void mglNamedRenderbufferStorage(GLMContext ctx, GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
void mglNamedRenderbufferStorageMultisample(GLMContext ctx, GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
void mglGetNamedRenderbufferParameteriv(GLMContext ctx, GLuint renderbuffer, GLenum pname, GLint *params);
void mglCreateTextures(GLMContext ctx, GLenum target, GLsizei n, GLuint *textures);
void mglTextureBuffer(GLMContext ctx, GLuint texture, GLenum internalformat, GLuint buffer);
void mglTextureBufferRange(GLMContext ctx, GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
void mglTextureStorage1D(GLMContext ctx, GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width);
void mglTextureStorage2D(GLMContext ctx, GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
void mglTextureStorage3D(GLMContext ctx, GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
void mglTextureStorage2DMultisample(GLMContext ctx, GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
void mglTextureStorage3DMultisample(GLMContext ctx, GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
void mglTextureSubImage1D(GLMContext ctx, GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
void mglTextureSubImage2D(GLMContext ctx, GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
void mglTextureSubImage3D(GLMContext ctx, GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
void mglCompressedTextureSubImage1D(GLMContext ctx, GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
void mglCompressedTextureSubImage2D(GLMContext ctx, GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
void mglCompressedTextureSubImage3D(GLMContext ctx, GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
void mglCopyTextureSubImage1D(GLMContext ctx, GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
void mglCopyTextureSubImage2D(GLMContext ctx, GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void mglCopyTextureSubImage3D(GLMContext ctx, GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void mglTextureParameterf(GLMContext ctx, GLuint texture, GLenum pname, GLfloat param);
void mglTextureParameterfv(GLMContext ctx, GLuint texture, GLenum pname, const GLfloat *param);
void mglTextureParameteri(GLMContext ctx, GLuint texture, GLenum pname, GLint param);
void mglTextureParameterIiv(GLMContext ctx, GLuint texture, GLenum pname, const GLint *params);
void mglTextureParameterIuiv(GLMContext ctx, GLuint texture, GLenum pname, const GLuint *params);
void mglTextureParameteriv(GLMContext ctx, GLuint texture, GLenum pname, const GLint *param);
void mglGenerateTextureMipmap(GLMContext ctx, GLuint texture);
void mglBindTextureUnit(GLMContext ctx, GLuint unit, GLuint texture);
void mglGetTextureImage(GLMContext ctx, GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
void mglGetCompressedTextureImage(GLMContext ctx, GLuint texture, GLint level, GLsizei bufSize, void *pixels);
void mglGetTextureLevelParameterfv(GLMContext ctx, GLuint texture, GLint level, GLenum pname, GLfloat *params);
void mglGetTextureLevelParameteriv(GLMContext ctx, GLuint texture, GLint level, GLenum pname, GLint *params);
void mglGetTextureParameterfv(GLMContext ctx, GLuint texture, GLenum pname, GLfloat *params);
void mglGetTextureParameterIiv(GLMContext ctx, GLuint texture, GLenum pname, GLint *params);
void mglGetTextureParameterIuiv(GLMContext ctx, GLuint texture, GLenum pname, GLuint *params);
void mglGetTextureParameteriv(GLMContext ctx, GLuint texture, GLenum pname, GLint *params);
void mglCreateVertexArrays(GLMContext ctx, GLsizei n, GLuint *arrays);
void mglDisableVertexArrayAttrib(GLMContext ctx, GLuint vaobj, GLuint index);
void mglEnableVertexArrayAttrib(GLMContext ctx, GLuint vaobj, GLuint index);
void mglVertexArrayElementBuffer(GLMContext ctx, GLuint vaobj, GLuint buffer);
void mglVertexArrayVertexBuffer(GLMContext ctx, GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
void mglVertexArrayVertexBuffers(GLMContext ctx, GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);
void mglVertexArrayAttribBinding(GLMContext ctx, GLuint vaobj, GLuint attribindex, GLuint bindingindex);
void mglVertexArrayAttribFormat(GLMContext ctx, GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
void mglVertexArrayAttribIFormat(GLMContext ctx, GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
void mglVertexArrayAttribLFormat(GLMContext ctx, GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
void mglVertexArrayBindingDivisor(GLMContext ctx, GLuint vaobj, GLuint bindingindex, GLuint divisor);
void mglGetVertexArrayiv(GLMContext ctx, GLuint vaobj, GLenum pname, GLint *param);
void mglGetVertexArrayIndexediv(GLMContext ctx, GLuint vaobj, GLuint index, GLenum pname, GLint *param);
void mglGetVertexArrayIndexed64iv(GLMContext ctx, GLuint vaobj, GLuint index, GLenum pname, GLint64 *param);
void mglCreateSamplers(GLMContext ctx, GLsizei n, GLuint *samplers);
void mglCreateProgramPipelines(GLMContext ctx, GLsizei n, GLuint *pipelines);
void mglCreateQueries(GLMContext ctx, GLenum target, GLsizei n, GLuint *ids);
void mglGetQueryBufferObjecti64v(GLMContext ctx, GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
void mglGetQueryBufferObjectiv(GLMContext ctx, GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
void mglGetQueryBufferObjectui64v(GLMContext ctx, GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
void mglGetQueryBufferObjectuiv(GLMContext ctx, GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
void mglMemoryBarrierByRegion(GLMContext ctx, GLbitfield barriers);
void mglGetTextureSubImage(GLMContext ctx, GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
void mglGetCompressedTextureSubImage(GLMContext ctx, GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels);
GLenum  mglGetGraphicsResetStatus(GLMContext ctx);
void mglGetnCompressedTexImage(GLMContext ctx, GLenum target, GLint lod, GLsizei bufSize, void *pixels);
void mglGetnTexImage(GLMContext ctx, GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
void mglGetnUniformdv(GLMContext ctx, GLuint program, GLint location, GLsizei bufSize, GLdouble *params);
void mglGetnUniformfv(GLMContext ctx, GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
void mglGetnUniformiv(GLMContext ctx, GLuint program, GLint location, GLsizei bufSize, GLint *params);
void mglGetnUniformuiv(GLMContext ctx, GLuint program, GLint location, GLsizei bufSize, GLuint *params);
void mglReadnPixels(GLMContext ctx, GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);
void mglGetnMapdv(GLMContext ctx, GLenum target, GLenum query, GLsizei bufSize, GLdouble *v);
void mglGetnMapfv(GLMContext ctx, GLenum target, GLenum query, GLsizei bufSize, GLfloat *v);
void mglGetnMapiv(GLMContext ctx, GLenum target, GLenum query, GLsizei bufSize, GLint *v);
void mglGetnPixelMapfv(GLMContext ctx, GLenum map, GLsizei bufSize, GLfloat *values);
void mglGetnPixelMapuiv(GLMContext ctx, GLenum map, GLsizei bufSize, GLuint *values);
void mglGetnPixelMapusv(GLMContext ctx, GLenum map, GLsizei bufSize, GLushort *values);
void mglGetnPolygonStipple(GLMContext ctx, GLsizei bufSize, GLubyte *pattern);
void mglGetnColorTable(GLMContext ctx, GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table);
void mglGetnConvolutionFilter(GLMContext ctx, GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image);
void mglGetnSeparableFilter(GLMContext ctx, GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span);
void mglGetnHistogram(GLMContext ctx, GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values);
void mglGetnMinmax(GLMContext ctx, GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values);
void mglTextureBarrier(GLMContext ctx);
void mglSpecializeShader(GLMContext ctx, GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue);
void mglMultiDrawArraysIndirectCount(GLMContext ctx, GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
void mglMultiDrawElementsIndirectCount(GLMContext ctx, GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
void mglPolygonOffsetClamp(GLMContext ctx, GLfloat factor, GLfloat units, GLfloat clamp);

#endif /* mgl_h */
